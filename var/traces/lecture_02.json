{
  "files": {
    "lecture_02.py": "from execute_util import text, link, image\nfrom facts import a100_flop_per_sec, h100_flop_per_sec\nimport torch.nn.functional as F\nimport timeit\nimport torch\nfrom typing import Iterable\nfrom torch import nn\nimport numpy as np\nfrom lecture_util import article_link\nfrom jaxtyping import Float\nfrom einops import rearrange, einsum, reduce\n\n\ndef main():\n    text(\"Last lecture: overiew, tokenization\")\n\n    text(\"Overview of this lecture:\")\n    text(\"- We will discuss all the **primitives** needed to train a model.\")\n    text(\"- We will go bottom-up from tensors to models to optimizers to the training loop.\")\n    text(\"- We will pay close attention to efficiency (use of **resources**).\")\n\n    text(\"In particular, we will account for two types of resources:\")\n    text(\"- Memory (GB)\")\n    text(\"- Compute (FLOPs)\")\n\n    motivating_questions()\n\n    text(\"We will not go over the Transformer.\")\n    text(\"There are excellent expositions:\")\n    link(title=\"Assignment 1 handout\", url=\"https://github.com/stanford-cs336/assignment1-basics/blob/main/cs336_spring2025_assignment1_basics.pdf\")\n    link(title=\"Mathematical description\", url=\"https://johnthickstun.com/docs/transformers.pdf\")\n    link(title=\"Illustrated Transformer\", url=\"http://jalammar.github.io/illustrated-transformer/\")\n    link(title=\"Illustrated GPT-2\", url=\"https://jalammar.github.io/illustrated-gpt2/\")\n    text(\"Instead, we'll work with simpler models.\")\n\n    text(\"What knowledge to take away:\")\n    text(\"- Mechanics: straightforward (just PyTorch)\")\n    text(\"- Mindset: resource accounting (remember to do it)\")\n    text(\"- Intuitions: broad strokes (no large models)\")\n\n    text(\"## Memory accounting\")\n    tensors_basics()\n    tensors_memory()\n\n    text(\"## Compute accounting\")\n    tensors_on_gpus()\n    tensor_operations()\n    tensor_einops()\n    tensor_operations_flops()\n    gradients_basics()\n    gradients_flops()\n\n    text(\"## Models\")\n    module_parameters()\n    custom_model()\n\n    text(\"Training loop and best practices\")\n    note_about_randomness()\n    data_loading()\n\n    optimizer()\n    train_loop()\n    checkpointing()\n    mixed_precision_training()\n\n\ndef motivating_questions():\n    text(\"Let's do some napkin math.\")\n\n    text(\"**Question**: How long would it take to train a 70B parameter model on 15T tokens on 1024 H100s?\")\n    total_flops = 6 * 70e9 * 15e12  # @inspect total_flops\n    assert h100_flop_per_sec == 1979e12 / 2\n    mfu = 0.5\n    flops_per_day = h100_flop_per_sec * mfu * 1024 * 60 * 60 * 24  # @inspect flops_per_day\n    days = total_flops / flops_per_day  # @inspect days\n\n    text(\"**Question**: What's the largest model that can you can train on 8 H100s using AdamW (naively)?\")\n    h100_bytes = 80e9  # @inspect h100_bytes\n    bytes_per_parameter = 4 + 4 + (4 + 4)  # parameters, gradients, optimizer state  @inspect bytes_per_parameter\n    num_parameters = (h100_bytes * 8) / bytes_per_parameter  # @inspect num_parameters\n    text(\"Caveat: activations are not accounted for (depends on batch size and sequence length).\")\n\n    text(\"This is a rough back-of-the-envelope calculation.\")\n\n\ndef tensor_einops():\n    einops_motivation()\n\n    text(\"Einops is a library for manipulating tensors where dimensions are named.\")\n    text(\"It is inspired by Einstein summation notation (Einstein, 1916).\")\n    link(title=\"[Einops tutorial]\", url=\"https://einops.rocks/1-einops-basics/\")\n\n    jaxtyping_basics()\n    einops_einsum()\n    einops_reduce()\n    einops_rearrange()\n    \n\ndef einops_motivation():\n    text(\"Traditional PyTorch code:\")\n    x = torch.ones(2, 2, 3)  # batch, sequence, features  @inspect x\n    y = torch.ones(2, 2, 3)  # batch, sequence, features  @inspect y\n    z = x @ y.transpose(-2, -1)  # batch, sequence, sequence  @inspect z\n    text(\"Easy to mess up the dimensions (what is -2, -1?)...\")\n\n\ndef jaxtyping_basics():\n    text(\"How do you keep track of tensor dimensions?\")\n\n    text(\"Old way:\")\n    x = torch.ones(2, 2, 1, 3)  # batch x seq x heads x hidden  @inspect x\n\n    text(\"New (jaxtyping) way:\")\n    x: Float[torch.Tensor, \"batch seq heads hidden\"] = torch.ones(2, 2, 1, 3)  # @inspect x\n    text(\"Note: this is just documentation (no enforcement).\")\n\n\ndef einops_einsum():\n    text(\"Einsum is generalized matrix multiplication with good bookkeeping.\")\n\n    text(\"Define two tensors:\")\n    x: Float[torch.Tensor, \"batch seq1 hidden\"] = torch.ones(2, 3, 4)  # @inspect x\n    y: Float[torch.Tensor, \"batch seq2 hidden\"] = torch.ones(2, 3, 4)  # @inspect y\n\n    text(\"Old way:\")\n    z = x @ y.transpose(-2, -1)  # batch, sequence, sequence  @inspect z\n\n    text(\"New (einops) way:\")\n    z = einsum(x, y, \"batch seq1 hidden, batch seq2 hidden -> batch seq1 seq2\")  # @inspect z\n    text(\"Dimensions that are not named in the output are summed over.\")\n\n    text(\"Or can use `...` to represent broadcasting over any number of dimensions:\")\n    z = einsum(x, y, \"... seq1 hidden, ... seq2 hidden -> ... seq1 seq2\")  # @inspect z\n\n\ndef einops_reduce():\n    text(\"You can reduce a single tensor via some operation (e.g., sum, mean, max, min).\")\n    x: Float[torch.Tensor, \"batch seq hidden\"] = torch.ones(2, 3, 4)  # @inspect x\n\n    text(\"Old way:\")\n    y = x.mean(dim=-1)  # @inspect y\n\n    text(\"New (einops) way:\")\n    y = reduce(x, \"... hidden -> ...\", \"sum\")  # @inspect y\n\n\ndef einops_rearrange():\n    text(\"Sometimes, some dimensions represent two dimensions and you want to operate on one of them.\")\n\n    x: Float[torch.Tensor, \"batch seq total_hidden\"] = torch.ones(2, 3, 8)  # @inspect x\n    text(\"...where `total_hidden` is a flattened representation of `heads * hidden1`\")\n    w: Float[torch.Tensor, \"hidden1 hidden2\"] = torch.ones(4, 4)\n\n    text(\"Break up `total_hidden` into two dimensions (`heads` and `hidden1`):\")\n    x = rearrange(x, \"... (heads hidden1) -> ... heads hidden1\", heads=2)  # @inspect x\n\n    text(\"Perform the transformation by `w`:\")\n    x = einsum(x, w, \"... hidden1, hidden1 hidden2 -> ... hidden2\")  # @inspect x\n\n    text(\"Combine `heads` and `hidden2` back together:\")\n    x = rearrange(x, \"... heads hidden2 -> ... (heads hidden2)\")  # @inspect x\n\n\ndef tensors_basics():\n    text(\"Tensors are the basic building block for storing everything: parameters, gradients, optimizer state, data, activations.\")\n    link(\"[PyTorch docs on tensors]\", url=\"https://pytorch.org/docs/stable/tensors.html\")\n\n    text(\"You can create tensors in multiple ways:\")\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x\n    x = torch.zeros(4, 8)  # 4x8 matrix of all zeros @inspect x\n    x = torch.ones(4, 8)  # 4x8 matrix of all ones @inspect x\n    x = torch.randn(4, 8)  # 4x8 matrix of iid Normal(0, 1) samples @inspect x\n\n    text(\"Allocate but don't initialize the values:\")\n    x = torch.empty(4, 8)  # 4x8 matrix of uninitialized values @inspect x\n    text(\"...because you want to use some custom logic to set the values later\")\n    nn.init.trunc_normal_(x, mean=0, std=1, a=-2, b=2)  # @inspect x\n\n\ndef tensors_memory():\n    text(\"Almost everything (parameters, gradients, activations, optimizer states) are stored as floating point numbers.\")\n\n    text(\"## float32\")\n    link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\")\n    image(\"images/fp32.png\", width=600)\n    text(\"The float32 data type (also known as fp32 or single precision) is the default.\")\n    text(\"Traditionally, in scientific computing, float32 is the baseline; you could use double precision (float64) in some cases.\")\n    text(\"In deep learning, you can be a lot sloppier.\")\n\n    text(\"Let's examine memory usage of these tensors.\")\n    text(\"Memory is determined by the (i) number of values and (ii) data type of each value.\")\n    x = torch.zeros(4, 8)  # @inspect x\n    assert x.dtype == torch.float32  # Default type\n    assert x.size() == torch.Size([4, 8])\n    assert x.numel() == 4 * 8\n    assert x.element_size() == 4  # Float is 4 bytes\n    assert get_memory_usage(x) == 4 * 8 * 4  # 128 bytes\n\n    text(\"One matrix in the feedforward layer of GPT-3:\")\n    assert get_memory_usage(torch.empty(12288 * 4, 12288)) == 2304 * 1024 * 1024  # 2.3 GB\n    text(\"...which is a lot!\")\n\n    text(\"## float16\")\n    link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\")\n    image(\"images/fp16.png\", width=400)\n    text(\"The float16 data type (also known as fp16 or half precision) cuts down the memory.\")\n    x = torch.zeros(4, 8, dtype=torch.float16)  # @inspect x\n    assert x.element_size() == 2\n    text(\"However, the dynamic range (especially for small numbers) isn't great.\")\n    x = torch.tensor([1e-8], dtype=torch.float16)  # @inspect x\n    assert x == 0  # Underflow!\n    text(\"If this happens when you train, you can get instability.\")\n\n    text(\"## bfloat16\")\n    link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Bfloat16_floating-point_format\")\n    image(\"images/bf16.png\", width=400)\n    text(\"Google Brian developed bfloat (brain floating point) in 2018 to address this issue.\")\n    text(\"bfloat16 uses the same memory as float16 but has the same dynamic range as float32!\")\n    text(\"The only catch is that the resolution is worse, but this matters less for deep learning.\")\n    x = torch.tensor([1e-8], dtype=torch.bfloat16)  # @inspect x\n    assert x != 0  # No underflow!\n\n    text(\"Let's compare the dynamic ranges and memory usage of the different data types:\")\n    float32_info = torch.finfo(torch.float32)  # @inspect float32_info\n    float16_info = torch.finfo(torch.float16)  # @inspect float16_info\n    bfloat16_info = torch.finfo(torch.bfloat16)  # @inspect bfloat16_info\n\n    text(\"## fp8\")\n    text(\"In 2022, FP8 was standardized, motivated by machine learning workloads.\")\n    link(\"https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/examples/fp8_primer.html\")\n    image(\"https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/_images/fp8_formats.png\", width=400)\n    text(\"H100s support two variants of FP8: E4M3 (range [-448, 448]) and E5M2 ([-57344, 57344]).\")\n    text(\"Reference: \"), link(\"https://arxiv.org/pdf/2209.05433.pdf\")\n\n    text(\"Implications on training:\")\n    text(\"- Training with float32 works, but requires lots of memory.\")\n    text(\"- Training with fp8, float16 and even bfloat16 is risky, and you can get instability.\")\n    text(\"- Solution (later): use mixed precision training, see \"), link(mixed_precision_training)\n\n\ndef tensors_on_gpus():\n    text(\"By default, tensors are stored in CPU memory.\")\n    x = torch.zeros(4, 8)\n    assert x.device == torch.device(\"cpu\")\n\n    text(\"However, in order to take advantage of the massive parallelism of GPUs, we need to move them to GPU memory.\")\n    image(\"https://www.researchgate.net/publication/338984158/figure/fig2/AS:854027243900928@1580627370716/Communication-between-host-CPU-and-GPU.png\", width=400)\n\n    text(\"Let's first see if we have any GPUs.\")\n    if not torch.cuda.is_available():\n        return\n\n    num_gpus = torch.cuda.device_count()  # @inspect num_gpus\n    for i in range(num_gpus):\n        properties = torch.cuda.get_device_properties(i)  # @inspect properties\n\n    memory_allocated = torch.cuda.memory_allocated()  # @inspect memory_allocated\n\n    text(\"Move the tensor to GPU memory (device 0).\")\n    y = x.to(\"cuda:0\")  # @inspect y\n    assert y.device == torch.device(\"cuda\", 0)\n\n    text(\"Create a tensor directly on the GPU:\")\n    z = torch.zeros(4, 8, device=\"cuda:0\")  # @inspect z\n\n    new_memory_allocated = torch.cuda.memory_allocated()  # @inspect new_memory_allocated\n    text(f\"GPU memory used (for y and z): {new_memory_allocated}\")\n    memory_used = new_memory_allocated - memory_allocated  # @inspect memory_used\n\n\ndef tensor_operations():\n    text(\"Most tensors are created from performing operations on other tensors.\")\n    text(\"Each operation has some memory and compute consequence.\")\n\n    text(\"## Storage\")\n\n    text(\"Pytorch tensors are really pointers into allocated memory with metadata describing how to get to any element of the tensor.\")\n    image(\"https://martinlwx.github.io/img/2D_tensor_strides.png\", width=400)\n    link(title=\"[PyTorch docs]\", url=\"https://pytorch.org/docs/stable/generated/torch.Tensor.stride.html\")\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])\n\n    text(\"To go to the next row (dim 0), skip 3 elements.\")\n    assert x.stride(0) == 3\n\n    text(\"To go to the next column (dim 1), skip 1 element.\")\n    assert x.stride(1) == 1\n\n    text(\"## Slicing and dicing\")\n\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])\n\n    text(\"Many operations simply provide a different *view* of the tensor.\")\n    text(\"This does not make a copy, and therefore mutations in one tensor affects the other.\")\n    y = x[0]  # @inspect y\n    assert torch.equal(y, torch.tensor([1., 2, 3]))\n    assert same_storage(x, y)\n\n    y = x[:, 1]  # @inspect y\n    assert torch.equal(y, torch.tensor([2, 5]))\n    assert same_storage(x, y)\n\n    y = x.view(3, 2)  # @inspect y\n    assert torch.equal(y, torch.tensor([[1, 2], [3, 4], [5, 6]]))\n    assert same_storage(x, y)\n\n    y = x.transpose(1, 0)  # @inspect y\n    assert torch.equal(y, torch.tensor([[1, 4], [2, 5], [3, 6]]))\n    assert same_storage(x, y)\n\n    text(\"Check that mutating x also mutates y.\")\n    x[0][0] = 100  # @inspect x\n    assert y[0][0] == 100  # @inspect y\n\n    text(\"Note that some views are non-contiguous entries, which means that further views aren't possible.\")\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x\n    y = x.transpose(1, 0)  # @inspect y\n    assert not y.is_contiguous()\n    try:\n        y.view(2, 3)\n        assert False\n    except RuntimeError as e:\n        assert \"view size is not compatible with input tensor's size and stride\" in str(e)\n\n    text(\"One can use reshape, which behaves like view if a copy is not needed...\")\n    y = x.reshape(3, 2)  # @inspect y\n    assert same_storage(x, y)\n\n    text(\"...or else makes a copy (different storage) if needed.\")\n    y = x.transpose(1, 0).reshape(6)  # @inspect y\n    assert not same_storage(x, y)\n    text(\"Views are free, copying take both (additional) memory and compute.\")\n\n    text(\"Now for the operations that make a copy...\")\n\n    text(\"## Elementwise operations\")\n    text(\"These operations apply some operation to each element of the tensor and return a (new) tensor of the same shape.\")\n    x = torch.tensor([1, 4, 9])\n    assert torch.equal(x.pow(2), torch.tensor([1, 16, 81]))\n    assert torch.equal(x.sqrt(), torch.tensor([1, 2, 3]))\n    assert torch.equal(x.rsqrt(), torch.tensor([1, 1 / 2, 1 / 3]))  # i -> 1/sqrt(x_i)\n\n    assert torch.equal(x + x, torch.tensor([2, 8, 18]))\n    assert torch.equal(x * 2, torch.tensor([2, 8, 18]))\n    assert torch.equal(x / 0.5, torch.tensor([2, 8, 18]))\n\n    text(\"`triu` takes the upper triangular part of a matrix.\")\n    text(\"This is useful for computing an causal attention mask, where M[i, j] is the contribution of i to j.\")\n    x = torch.ones(3, 3).triu()  # @inspect x\n    assert torch.equal(x, torch.tensor([\n        [1, 1, 1],\n        [0, 1, 1],\n        [0, 0, 1]],\n    ))\n\n    text(\"## Aggregate operations\")\n\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x\n\n    text(\"By default, mean aggregates over the entire matrix.\")\n    assert torch.equal(torch.mean(x), torch.tensor(3.5))\n\n    text(\"We can aggregate only over a subset of the dimensions by specifying `dim`.\")\n    assert torch.equal(torch.mean(x, dim=1), torch.tensor([2, 5]))\n\n    text(\"Variance has the same form factor as mean.\")\n    assert torch.equal(torch.var(torch.tensor([-10., 10])), torch.tensor(200))  # Note: Bessel corrected\n\n    text(\"## Batching\")\n\n    image(\"images/batch-sequence.png\", width=400)\n    text(\"As a general rule, matrix multiplications are very optimized, so the more we can build up things into a single matrix operation, the better.\")\n\n    text(\"### `stack`\")\n    text(\"The `stack` operation adds a new dimension indexing the tensor we're stacking.\")\n    text(\"You can use `stack` given a set of data points, create a batch dimension.\")\n    x = torch.tensor([\n        [1., 2, 3],\n        [4, 5, 6],\n    ])\n    assert torch.equal(torch.stack([x, x], dim=0), torch.tensor([\n        [\n            [1, 2, 3],\n            [4, 5, 6],\n        ],\n        [\n            [1, 2, 3],\n            [4, 5, 6],\n        ],\n    ]))\n\n    text(\"### `cat`\")\n    text(\"The `cat` operation concatenates two tensors along some dimension and does not add another dimension\")\n    text(\"This is useful for combining batching multiple matrix operations (e.g., Q, K, V in attention).\")\n    x = torch.tensor([\n        [1, 2, 3],\n        [4, 5, 6],\n    ])\n    assert torch.equal(torch.cat([x, x], dim=1), torch.tensor([\n        [1, 2, 3, 1, 2, 3],\n        [4, 5, 6, 4, 5, 6],\n    ]))\n\n    text(\"You can also unbatch using `tensor_split`.\")\n    list_x = [x, x, x]\n    roundtrip_list_x = torch.tensor_split(torch.cat(list_x, dim=1), 3, dim=1)\n    assert all(torch.equal(a, b) for a, b in zip(list_x, roundtrip_list_x))\n\n    text(\"### `squeeze`, `unsqueeze`\")\n    text(\"Squeezing and unsqueezing simply add or a remove a dimension.\")\n    x = torch.tensor([1, 2, 3])\n\n    text(\"Unsqueeze adds a dimension.\")\n    assert torch.equal(torch.unsqueeze(x, dim=0), torch.tensor([[1, 2, 3]]))\n\n    text(\"Squeeze removes a dimension.\")\n    assert torch.equal(torch.squeeze(torch.unsqueeze(x, dim=0)), x)\n\n    text(\"## Matrix multiplication\")\n\n    text(\"Finally, the bread and butter of deep learning: matrix multiplication.\")\n    text(\"Note that the first matrix could have an dimensions (batch, sequence length).\")\n    x = torch.ones(4, 4, 16, 32)\n    y = torch.ones(32, 16)\n    z = x @ y\n    assert z.size() == torch.Size([4, 4, 16, 16])\n\n\ndef tensor_operations_flops():\n    text(\"Having gone through all the operations, let us examine their computational cost.\")\n\n    text(\"A floating-point operation (FLOP) is a basic operation like addition (x + y) or multiplication (x y).\")\n\n    text(\"Two terribly confusing acronyms (pronounced the same!):\")\n    text(\"- FLOPs: floating-point operations (measure of computation done)\")\n    text(\"- FLOP/s: floating-point operations per second (also written as FLOPS), which is used to measure the speed of hardware.\")\n    text(\"By default, we will talk about FLOPs.\")\n\n    text(\"## Intuitions\")\n\n    text(\"Training GPT-3 took 3.14e23 FLOPs. \"), article_link(\"https://lambdalabs.com/blog/demystifying-gpt-3\")\n    text(\"Training GPT-4 is speculated to take 2e25 FLOPs\"), article_link(\"https://patmcguinness.substack.com/p/gpt-4-details-revealed\")\n    text(\"US executive order: any foundation model trained with >= 1e26 FLOPs must be reported to the government (revoked in 2025)\")\n\n    text(\"A100 has a peak performance of 312 teraFLOP/s (3.12e14)\")\n    assert a100_flop_per_sec == 312e12\n    text(\"8 A100s for 2 weeks: 1.5e21 FLOPs\")\n    total_flops = 8 * (60 * 60 * 24 * 7) * a100_flop_per_sec\n\n    text(\"## Linear model\")\n    text(\"As motivation, suppose you have a linear model.\")\n    text(\"- We have n points\")\n    text(\"- Each point is d-dimsional\")\n    text(\"- The linear model maps each d-dimensional vector to a k outputs\")\n    if torch.cuda.is_available():\n        B = 16384  # Number of points\n        D = 32768  # Dimension\n        K = 8192   # Number of outputs\n    else:\n        B = 1024\n        D = 256\n        K = 64\n\n    device = get_device()\n    x = torch.ones(B, D, device=device)\n    w = torch.randn(D, K, device=device)\n    y = x @ w\n    text(\"We have one multiplication (x[i][j] * w[j][k]) and one addition per (i, j, k) triple.\")\n    actual_num_flops = 2 * B * D * K\n\n    text(\"## FLOPs of other operations\")\n    text(\"- Elementwise operation on a m x n matrix requires O(m n) FLOPs.\")\n    text(\"- Addition of two m x n matrices requires m n FLOPs.\")\n    text(\"In general, no other operation that you'd encounter in deep learning is as expensive as matrix multiplication for large enough matrices.\")\n\n    text(\"Interpretation:\")\n    text(\"- B is the number of data points\")\n    text(\"- (D K) is the number of parameters\")\n    text(\"- FLOPs for forward pass is 2 (# tokens) (# parameters)\")\n    text(\"It turns out this generalizes to Transformers.\")\n\n    text(\"How do our FLOPs calculations translate to wall-clock time (seconds)?\")\n    text(\"Let us time it!\")\n    actual_time = time_matmul(x, w)\n    actual_flop_per_sec = actual_num_flops / actual_time\n    text(f\"Actual FLOPs/sec (float32): {actual_flop_per_sec}\")\n\n    text(\"Each GPU has a specification sheet that reports the peak performance.\")\n    text(\"- A100 \"), link(title=\"[spec]\", url=\"https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-us-nvidia-1758950-r4-web.pdf\")\n    text(\"- H100 \"), link(title=\"[spec]\", url=\"https://resources.nvidia.com/en-us-tensor-core/nvidia-tensor-core-gpu-datasheet\")\n    text(\"Note that the FLOP/s depends heavily on the data type!\")\n    promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)\n    text(f\"Promised FLOPs/sec (float32): {promised_flop_per_sec}\")\n\n    text(\"## Model FLOPs utilization (MFU)\")\n\n    text(\"Definition: (actual FLOP/s) / (promised FLOP/s) [ignore communication/overhead]\")\n    mfu = actual_flop_per_sec / promised_flop_per_sec\n    text(f\"MFU (float32): {mfu}\")\n    text(\"Usually, MFU of >= 0.5 is quite good (and will be higher if matmuls dominate)\")\n\n    text(\"Let's do it with bfloat16:\")\n    x = x.to(torch.bfloat16)\n    w = w.to(torch.bfloat16)\n    actual_time = time_matmul(x, w)\n\n    actual_flop_per_sec = actual_num_flops / actual_time\n    text(f\"Actual FLOPs/sec (bfloat16): {actual_flop_per_sec}\")\n\n    promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)\n    text(f\"Promised FLOPs/sec (bfloat16): {promised_flop_per_sec}\")\n\n    mfu = actual_flop_per_sec / promised_flop_per_sec\n    text(f\"MFU (bfloat16): {mfu}\")\n    text(\"Note: comparing bfloat16 to float32, the actual FLOP/s is higher.\")\n    text(\"The MFU here is rather low, probably because the promised FLOPs is optimistic (and seems to rely on sparsity, which we don't have).\")\n\n    text(\"## Summary\")\n    text(\"- Matrix multiplications dominate: (2 m n p) FLOPs\")\n    text(\"- FLOP/s depends on hardware (H100 >> A100) and data type (bfloat16 >> float32)\")\n    text(\"- Model FLOPs utilization (MFU): (actual FLOP/s) / (promised FLOP/s)\")\n\n\ndef gradients_basics():\n    text(\"So far, we've constructed tensors (which correspond to either parameters or data) and passed them through operations (forward).\")\n    text(\"Now, we're going to compute the gradient (backward).\")\n\n    text(\"As a simple example, let's consider the simple linear model: \"\n         \"y = 0.5 (x * w - 5)^2\")\n\n    text(\"Forward pass: compute loss\")\n    x = torch.tensor([1., 2, 3])\n    assert x.requires_grad == False  # By default, no gradient\n    w = torch.tensor([1., 1, 1], requires_grad=True)  # Want gradient\n    pred_y = x @ w\n    loss = 0.5 * (pred_y - 5).pow(2)\n    assert w.grad is None\n\n    text(\"Backward pass: compute gradients\")\n    loss.backward()\n    assert loss.grad is None\n    assert pred_y.grad is None\n    assert x.grad is None\n    assert torch.equal(w.grad, torch.tensor([1, 2, 3]))\n\n\ndef gradients_flops():\n    text(\"Let us do count the FLOPs for computing gradients.\")\n\n    text(\"Revisit our linear model\")\n    if torch.cuda.is_available():\n        B = 16384  # Number of points\n        D = 32768  # Dimension\n        K = 8192   # Number of outputs\n    else:\n        B = 1024\n        D = 256\n        K = 64\n\n    device = get_device()\n    x = torch.ones(B, D, device=device)\n    w1 = torch.randn(D, D, device=device, requires_grad=True)\n    w2 = torch.randn(D, K, device=device, requires_grad=True)\n\n    text(\"Model: x --w1--> h1 --w2--> h2 -> loss\")\n    h1 = x @ w1\n    h2 = h1 @ w2\n    loss = h2.pow(2).mean()\n\n    text(\"Recall the number of forward FLOPs: \"), link(tensor_operations_flops)\n    text(\"- Multiply x[i][j] * w1[j][k]\")\n    text(\"- Add to h1[i][k]\")\n    text(\"- Multiply h1[i][j] * w2[j][k]\")\n    text(\"- Add to h2[i][k]\")\n    num_forward_flops = (2 * B * D * D) + (2 * B * D * K)\n\n    text(\"How many FLOPs is running the backward pass?\")\n    h1.retain_grad()  # For debugging\n    h2.retain_grad()  # For debugging\n    loss.backward()\n\n    text(\"Recall model: x --w1--> h1 --w2--> h2 -> loss\")\n\n    text(\"- h1.grad = d loss / d h1\")\n    text(\"- h2.grad = d loss / d h2\")\n    text(\"- w1.grad = d loss / d w1\")\n    text(\"- w2.grad = d loss / d w2\")\n\n    text(\"Focus on the parameter w2.\")\n    text(\"Invoke the chain rule.\")\n\n    num_backward_flops = 0  # @inspect num_backward_flops\n\n    text(\"w2.grad[j,k] = sum_i h1[i,j] * h2.grad[i,k]\")\n    assert w2.grad.size() == torch.Size([D, K])\n    assert h1.size() == torch.Size([B, D])\n    assert h2.grad.size() == torch.Size([B, K])\n    text(\"For each (i, j, k), multiply and add.\")\n    num_backward_flops += 2 * B * D * K  # @inspect num_backward_flops\n\n    text(\"h1.grad[i,j] = sum_k w2[i,j] * h2[i,k]\")\n    assert h1.grad.size() == torch.Size([B, D])\n    assert w2.size() == torch.Size([D, K])\n    assert h2.grad.size() == torch.Size([B, K])\n    text(\"For each (i, j, k), multiply and add.\")\n    num_backward_flops += 2 * B * D * K  # @inspect num_backward_flops\n\n    text(\"This was for just w2 (D*K parameters).\")\n    text(\"Can do it for w1 (D*D parameters) as well (though don't need x.grad).\")\n    num_backward_flops += 4 * B * D * D  # @inspect num_backward_flops\n\n    text(\"A nice graphical visualization: \"), article_link(\"https://medium.com/@dzmitrybahdanau/the-flops-calculus-of-language-model-training-3b19c1f025e4\")\n    image(\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*VC9y_dHhCKFPXj90Qshj3w.gif\", width=500)\n\n    text(\"Putting it togther:\")\n    text(\"- Forward pass: 2 (# data points) (# parameters) FLOPs\")\n    text(\"- Backward pass: 4 (# data points) (# parameters) FLOPs\")\n    text(\"- Total: 6 (# data points) (# parameters) FLOPs\")\n\n\ndef module_parameters():\n    input_dim = 16384\n    hidden_dim = 32\n\n    text(\"Model parameters are stored in PyTorch as `nn.Parameter` objects.\")\n    w = nn.Parameter(torch.randn(input_dim, hidden_dim))\n    assert isinstance(w, torch.Tensor)  # Behaves like a tensor\n    assert type(w.data) == torch.Tensor  # Access the underlying tensor\n\n    text(\"## Parameter initialization\")\n\n    text(\"Let's see what happens.\")\n    x = nn.Parameter(torch.randn(input_dim))\n    output = x @ w  # @ inspect output\n    assert output.size() == torch.Size([hidden_dim])\n    text(f\"Note that each element of `output` scales as sqrt(num_inputs): {output[0]}.\")\n    text(\"Large values can cause gradients to blow up and cause training to be unstable.\")\n\n    text(\"We want an initialization that is invariant to `hidden_dim`.\")\n    text(\"To do that, we simply rescale by 1/sqrt(num_inputs)\")\n    w = nn.Parameter(torch.randn(input_dim, hidden_dim) / np.sqrt(input_dim))\n    output = x @ w  # @ inspect output\n    text(f\"Now each element of `output` is constant: {output[0]}.\")\n\n    text(\"Up to a constant, this is Xavier initialization.\"), link(title=\"[paper]\", url=\"https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\"), link(title=\"[stackexchange]\", url=\"https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head\")\n\n    text(\"To be extra safe, we truncate the normal distribution to [-3, 3].\")\n    w = nn.Parameter(nn.init.trunc_normal_(torch.empty(input_dim, hidden_dim), std=1, a=-3, b=3))\n\n\ndef custom_model():\n    text(\"Let's build up a simple deep linear model using `nn.Parameter`.\")\n\n    D = 64  # Dimension\n    num_layers = 2\n    model = Cruncher(dim=D, num_layers=num_layers)\n\n    param_sizes = [\n        (name, param.numel())\n        for name, param in model.state_dict().items()\n    ]\n    assert param_sizes == [\n        (\"layers.0.weight\", D * D),\n        (\"layers.1.weight\", D * D),\n        (\"final.weight\", D),\n    ]\n    num_parameters = get_num_parameters(model)\n    assert num_parameters == (D * D) + (D * D) + D\n\n    text(\"Remember to move the model to the GPU.\")\n    device = get_device()\n    model = model.to(device)\n\n    text(\"Run the model on some data.\")\n    B = 8  # Batch size\n    x = torch.randn(B, D, device=device)\n    y = model(x)\n    assert y.size() == torch.Size([B])\n\n\nclass Linear(nn.Module):\n    \"\"\"Simple linear layer.\"\"\"\n    def __init__(self, input_dim: int, output_dim: int):\n        super().__init__()\n        self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        return x @ self.weight\n\n\nclass Cruncher(nn.Module):\n    def __init__(self, dim: int, num_layers: int):\n        super().__init__()\n        self.layers = nn.ModuleList([\n            Linear(dim, dim)\n            for i in range(num_layers)\n        ])\n        self.final = Linear(dim, 1)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        # Apply linear layers\n        B, D = x.size()\n        for layer in self.layers:\n            x = layer(x)\n\n        # Apply final head\n        x = self.final(x)\n        assert x.size() == torch.Size([B, 1])\n\n        # Remove the last dimension\n        x = x.squeeze(-1)\n        assert x.size() == torch.Size([B])\n\n        return x\n\n\ndef get_batch(data: np.array, batch_size: int, sequence_length: int, device: str) -> torch.Tensor:\n    text(\"Sample `batch_size` random positions into `data`.\")\n    start_indices = torch.randint(len(data) - sequence_length, (batch_size,))\n    assert start_indices.size() == torch.Size([batch_size])\n\n    text(\"Index into the data.\")\n    x = torch.tensor([data[start:start + sequence_length] for start in start_indices])\n    assert x.size() == torch.Size([batch_size, sequence_length])\n\n    text(\"## Pinned memory\")\n\n    text(\"By default, CPU tensors are in paged memory. We can explicitly pin.\")\n    if torch.cuda.is_available():\n        x = x.pin_memory()\n\n    text(\"This allows us to copy `x` from CPU into GPU asynchronously.\")\n    x = x.to(device, non_blocking=True)\n\n    text(\"This allows us to do two things in parallel (not done here):\")\n    text(\"- Fetch the next batch of data into CPU\")\n    text(\"- Process `x` on the GPU.\")\n\n    link(\"https://developer.nvidia.com/blog/how-optimize-data-transfers-cuda-cc/\")\n    link(\"https://gist.github.com/ZijiaLewisLu/eabdca955110833c0ce984d34eb7ff39?permalink_comment_id=3417135\")\n\n    return x\n\n\ndef note_about_randomness():\n    text(\"Randomness shows up in many places: \"\n         \"parameter initialization, dropout, data ordering, etc.\")\n    text(\"For reproducibility, \"\n         \"we recommend you always pass in a different random seed for each use of randomness.\")\n    text(\"Determinism is particularly useful when debugging, so you can hunt down the bug.\")\n\n    text(\"There are three places to set the random seed, \"\n         \"which you should do all at once just to be safe.\")\n    # Torch\n    seed = 0\n    torch.manual_seed(seed)\n\n    # NumPy\n    import numpy as np\n    np.random.seed(seed)\n\n    # Python\n    import random\n    random.seed(seed)\n\n\ndef data_loading():\n    text(\"In language modeling, data is a sequence of integers (output by the tokenizer).\")\n\n    text(\"It is convenient to serialize them as numpy arrays (done by the tokenizer).\")\n    orig_data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int32)\n    orig_data.tofile(\"data.npy\")\n\n    text(\"You can load them back as numpy arrays.\")\n    text(\"Don't want to load the entire data into memory at once (LLaMA data is 2.8TB).\")\n    text(\"Use memmap to lazily load only the accessed parts into memory.\")\n    data = np.memmap(\"data.npy\", dtype=np.int32)\n    assert np.array_equal(data, orig_data)\n\n    text(\"A *data loader* generates a batch of sequences for training.\")\n    B = 2  # Batch size\n    L = 4  # Length of sequence\n    x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())\n    assert x.size() == torch.Size([B, L])\n\n\nclass SGD(torch.optim.Optimizer):\n    def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):\n        super(SGD, self).__init__(params, dict(lr=lr))\n\n    def step(self):\n        for group in self.param_groups:\n            lr = group[\"lr\"]\n            for p in group[\"params\"]:\n                grad = p.grad.data\n                p.data -= lr * grad\n\n\nclass AdaGrad(torch.optim.Optimizer):\n    def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):\n        super(AdaGrad, self).__init__(params, dict(lr=lr))\n\n    def step(self):\n        for group in self.param_groups:\n            lr = group[\"lr\"]\n            for p in group[\"params\"]:\n                # Optimizer state\n                state = self.state[p]\n                grad = p.grad.data\n\n                # Get squared gradients g2 = sum_{i<t} g_i^2\n                g2 = state.get(\"g2\", torch.zeros_like(grad))\n\n                # Update optimizer state\n                g2 += torch.square(grad)\n                state[\"g2\"] = g2\n\n                # Update parameters\n                p.data -= lr * grad / torch.sqrt(g2 + 1e-5)\n\n\ndef optimizer():\n    text(\"Recall our deep linear model.\")\n    B = 2\n    D = 4\n    num_layers = 2\n    model = Cruncher(dim=D, num_layers=num_layers).to(get_device())\n\n    text(\"Let's define the AdaGrad optimizer\")\n    text(\"- AdaGrad = SGD + scale by grad^2\")\n    text(\"- RMSProp = AdaGrad + exponentially decaying weighting\")\n    text(\"- Adam = RMSProp + momentum\")\n    link(\"https://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf\")\n    optimizer = AdaGrad(model.parameters(), lr=0.01)\n    state = model.state_dict()  # @inspect state\n\n    text(\"Compute gradients\")\n    x = torch.randn(B, D, device=get_device())\n    y = torch.tensor([4., 5.], device=get_device())\n    pred_y = model(x)\n    loss = F.mse_loss(input=pred_y, target=y)\n    loss.backward()\n\n    text(\"Take a step\")\n    optimizer.step()\n    state = model.state_dict()  # @inspect state\n\n    text(\"Free up the memory (optional)\")\n    optimizer.zero_grad(set_to_none=True)\n\n    text(\"## Memory\")\n\n    # Parameters\n    num_parameters = (D * D * num_layers) + D\n    assert num_parameters == get_num_parameters(model)\n\n    # Activations\n    num_activations = B * D * num_layers\n\n    # Gradients\n    num_gradients = num_parameters\n\n    # Optimizer states\n    num_optimizer_states = num_parameters\n\n    # Putting it all together, assuming float32\n    total_memory = 4 * \\\n        (num_parameters + num_activations + num_gradients + num_optimizer_states)\n    text(total_memory)\n\n    text(\"## Compute (for one step)\")\n    flops = 6 * B * num_parameters\n    text(flops)\n\n    text(\"## Transformers\")\n\n    text(\"The accounting for a Transformer is more complicated, but the same idea.\")\n    text(\"Assignment 1 will ask you to do that.\")\n\n    text(\"Blog post describing memory usage for Transformer training\")\n    link(\"https://erees.dev/transformer-memory/\")\n\n    text(\"Blog post descibing FLOPs for a Transformer:\")\n    link(\"https://www.adamcasson.com/posts/transformer-flops\")\n\n\ndef train_loop():\n    text(\"Generate data from linear function with weights (0, 1, 2, ..., D-1).\")\n    D = 16\n    true_w = torch.arange(D, dtype=torch.float32, device=get_device())\n    def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:\n        x = torch.randn(B, D).to(get_device())\n        true_y = x @ true_w\n        return (x, true_y)\n\n    text(\"Let's do a basic run\")\n    train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)\n\n    text(\"Do some hyperparameter tuning\")\n    train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)\n\n\ndef train(name: str, get_batch,\n          D: int, num_layers: int,\n          B: int, num_train_steps: int, lr: float):\n    model = Cruncher(dim=D, num_layers=0).to(get_device())\n    optimizer = SGD(model.parameters(), lr=0.01)\n\n    for t in range(num_train_steps):\n        # Get data\n        x, y = get_batch(B=B)\n\n        # Forward (compute loss)\n        pred_y = model(x)\n        loss = F.mse_loss(pred_y, y)\n\n        # Backward (compute gradients)\n        loss.backward()\n\n        # Update parameters\n        optimizer.step()\n        optimizer.zero_grad(set_to_none=True)\n\n\ndef checkpointing():\n    text(\"Training language models take a long time and certainly will certainly crash.\")\n    text(\"You don't want to lose all your progress.\")\n\n    text(\"During training, it is useful to periodically save your model and optimizer state to disk.\")\n\n    model = Cruncher(dim=64, num_layers=3).to(get_device())\n    optimizer = AdaGrad(model.parameters(), lr=0.01)\n\n    text(\"Save the checkpoint:\")\n    checkpoint = {\n        \"model\": model.state_dict(),\n        \"optimizer\": optimizer.state_dict(),\n    }\n    torch.save(checkpoint, \"model_checkpoint.pt\")\n\n    text(\"Load the checkpoint:\")\n    loaded_checkpoint = torch.load(\"model_checkpoint.pt\")\n\n\ndef mixed_precision_training():\n    text(\"Choice of data type (float32, bfloat16, fp8) have tradeoffs.\")\n    text(\"- Higher precision: more accurate/stable, more memory, more compute\")\n    text(\"- Lower precision: less accurate/stable, less memory, less compute\")\n\n    text(\"How can we get the best of both worlds?\")\n\n    text(\"Solution: use float32 by default, but use {bfloat16, fp8} when possible.\")\n\n    text(\"A concrete plan:\")\n    text(\"- Use {bfloat16, fp8} for the forward pass (activations).\")\n    text(\"- Use float32 for the rest (parameters, gradients).\")\n\n    text(\"- Mixed precision training \"), link(\"https://arxiv.org/pdf/1710.03740.pdf\")\n\n    text(\"Pytorch has an automatic mixed precision (AMP) library.\")\n    link(\"https://pytorch.org/docs/stable/amp.html\")\n    link(\"https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/\")\n\n    text(\"NVIDIA's Transformer Engine supports FP8 for linear layers\")\n    text(\"Use FP8 pervasively throughout training \"), link(\"https://arxiv.org/pdf/2310.18313.pdf\")\n\n\n############################################################\n\ndef get_memory_usage(x: torch.Tensor):\n    return x.numel() * x.element_size()\n\n\ndef get_promised_flop_per_sec(device: str, dtype: torch.dtype) -> float:\n    \"\"\"Return the peak FLOP/s for `device` operating on `dtype`.\"\"\"\n    if not torch.cuda.is_available():\n        text(\"No CUDA device available, so can't get FLOP/s.\")\n        return 1\n    properties = torch.cuda.get_device_properties(device)\n\n    if \"A100\" in properties.name:\n        # https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-us-nvidia-1758950-r4-web.pdf\")\n        if dtype == torch.float32:\n            return 19.5e12\n        if dtype in (torch.bfloat16, torch.float16):\n            return 312e12\n        raise ValueError(f\"Unknown dtype: {dtype}\")\n\n    if \"H100\" in properties.name:\n        # https://resources.nvidia.com/en-us-tensor-core/nvidia-tensor-core-gpu-datasheet\")\n        if dtype == torch.float32:\n            return 67.5e12\n        if dtype in (torch.bfloat16, torch.float16):\n            return 1979e12 / 2  # 1979 is for sparse, dense is half of that\n        raise ValueError(f\"Unknown dtype: {dtype}\")\n\n    raise ValueError(f\"Unknown device: {device}\")\n\n\ndef same_storage(x: torch.Tensor, y: torch.Tensor):\n    return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()\n\n\ndef time_matmul(a: torch.Tensor, b: torch.Tensor) -> float:\n    \"\"\"Return the number of seconds required to perform `a @ b`.\"\"\"\n\n    # Wait until previous CUDA threads are done\n    if torch.cuda.is_available():\n        torch.cuda.synchronize()\n\n    def run():\n        # Perform the operation\n        a @ b\n\n        # Wait until CUDA threads are done\n        if torch.cuda.is_available():\n            torch.cuda.synchronize()\n\n    # Time the operation times\n    num_trials = 5\n    total_time = timeit.timeit(run, number=num_trials)\n\n    return total_time / num_trials\n\n\ndef get_num_parameters(model: nn.Module) -> int:\n    return sum(param.numel() for param in model.parameters())\n\ndef get_device(index: int = 0) -> torch.device:\n    \"\"\"Try to use the GPU if possible, otherwise, use CPU.\"\"\"\n    if torch.cuda.is_available():\n        return torch.device(f\"cuda:{index}\")\n    else:\n        return torch.device(\"cpu\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  "steps": [
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 14,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 15,
          "function_name": "main",
          "code": "text(\"Last lecture: overiew, tokenization\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last lecture: overiew, tokenization",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 17,
          "function_name": "main",
          "code": "text(\"Overview of this lecture:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Overview of this lecture:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 18,
          "function_name": "main",
          "code": "text(\"- We will discuss all the **primitives** needed to train a model.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We will discuss all the **primitives** needed to train a model.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 19,
          "function_name": "main",
          "code": "text(\"- We will go bottom-up from tensors to models to optimizers to the training loop.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We will go bottom-up from tensors to models to optimizers to the training loop.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"- We will pay close attention to efficiency (use of **resources**).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We will pay close attention to efficiency (use of **resources**).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 22,
          "function_name": "main",
          "code": "text(\"In particular, we will account for two types of resources:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In particular, we will account for two types of resources:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"- Memory (GB)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Memory (GB)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 24,
          "function_name": "main",
          "code": "text(\"- Compute (FLOPs)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute (FLOPs)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 67,
          "function_name": "motivating_questions",
          "code": "def motivating_questions():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 68,
          "function_name": "motivating_questions",
          "code": "text(\"Let's do some napkin math.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's do some napkin math.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 70,
          "function_name": "motivating_questions",
          "code": "text(\"**Question**: How long would it take to train a 70B parameter model on 15T tokens on 1024 H100s?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Question**: How long would it take to train a 70B parameter model on 15T tokens on 1024 H100s?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 71,
          "function_name": "motivating_questions",
          "code": "total_flops = 6 * 70e9 * 15e12  # @inspect total_flops"
        }
      ],
      "env": {
        "total_flops": 6.3e+24
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 72,
          "function_name": "motivating_questions",
          "code": "assert h100_flop_per_sec == 1979e12 / 2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 73,
          "function_name": "motivating_questions",
          "code": "mfu = 0.5"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 74,
          "function_name": "motivating_questions",
          "code": "flops_per_day = h100_flop_per_sec * mfu * 1024 * 60 * 60 * 24  # @inspect flops_per_day"
        }
      ],
      "env": {
        "flops_per_day": 4.37723136e+22
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 75,
          "function_name": "motivating_questions",
          "code": "days = total_flops / flops_per_day  # @inspect days"
        }
      ],
      "env": {
        "days": 143.92659381842682
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 77,
          "function_name": "motivating_questions",
          "code": "text(\"**Question**: What's the largest model that can you can train on 8 H100s using AdamW (naively)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Question**: What's the largest model that can you can train on 8 H100s using AdamW (naively)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 78,
          "function_name": "motivating_questions",
          "code": "h100_bytes = 80e9  # @inspect h100_bytes"
        }
      ],
      "env": {
        "h100_bytes": 80000000000.0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 79,
          "function_name": "motivating_questions",
          "code": "bytes_per_parameter = 4 + 4 + (4 + 4)  # parameters, gradients, optimizer state  @inspect bytes_per_parameter"
        }
      ],
      "env": {
        "bytes_per_parameter": 16
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 80,
          "function_name": "motivating_questions",
          "code": "num_parameters = (h100_bytes * 8) / bytes_per_parameter  # @inspect num_parameters"
        }
      ],
      "env": {
        "num_parameters": 40000000000.0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 81,
          "function_name": "motivating_questions",
          "code": "text(\"Caveat: activations are not accounted for (depends on batch size and sequence length).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Caveat: activations are not accounted for (depends on batch size and sequence length).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 83,
          "function_name": "motivating_questions",
          "code": "text(\"This is a rough back-of-the-envelope calculation.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is a rough back-of-the-envelope calculation.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 26,
          "function_name": "main",
          "code": "motivating_questions()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 28,
          "function_name": "main",
          "code": "text(\"We will not go over the Transformer.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We will not go over the Transformer.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 29,
          "function_name": "main",
          "code": "text(\"There are excellent expositions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are excellent expositions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 30,
          "function_name": "main",
          "code": "link(title=\"Assignment 1 handout\", url=\"https://github.com/stanford-cs336/assignment1-basics/blob/main/cs336_spring2025_assignment1_basics.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Assignment 1 handout",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://github.com/stanford-cs336/assignment1-basics/blob/main/cs336_spring2025_assignment1_basics.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 31,
          "function_name": "main",
          "code": "link(title=\"Mathematical description\", url=\"https://johnthickstun.com/docs/transformers.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Mathematical description",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://johnthickstun.com/docs/transformers.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 32,
          "function_name": "main",
          "code": "link(title=\"Illustrated Transformer\", url=\"http://jalammar.github.io/illustrated-transformer/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Illustrated Transformer",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "http://jalammar.github.io/illustrated-transformer/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 33,
          "function_name": "main",
          "code": "link(title=\"Illustrated GPT-2\", url=\"https://jalammar.github.io/illustrated-gpt2/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Illustrated GPT-2",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://jalammar.github.io/illustrated-gpt2/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 34,
          "function_name": "main",
          "code": "text(\"Instead, we'll work with simpler models.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Instead, we'll work with simpler models.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 36,
          "function_name": "main",
          "code": "text(\"What knowledge to take away:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What knowledge to take away:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 37,
          "function_name": "main",
          "code": "text(\"- Mechanics: straightforward (just PyTorch)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Mechanics: straightforward (just PyTorch)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 38,
          "function_name": "main",
          "code": "text(\"- Mindset: resource accounting (remember to do it)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Mindset: resource accounting (remember to do it)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 39,
          "function_name": "main",
          "code": "text(\"- Intuitions: broad strokes (no large models)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Intuitions: broad strokes (no large models)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 41,
          "function_name": "main",
          "code": "text(\"## Memory accounting\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Memory accounting",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 164,
          "function_name": "tensors_basics",
          "code": "def tensors_basics():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 165,
          "function_name": "tensors_basics",
          "code": "text(\"Tensors are the basic building block for storing everything: parameters, gradients, optimizer state, data, activations.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Tensors are the basic building block for storing everything: parameters, gradients, optimizer state, data, activations.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 166,
          "function_name": "tensors_basics",
          "code": "link(\"[PyTorch docs on tensors]\", url=\"https://pytorch.org/docs/stable/tensors.html\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "[PyTorch docs on tensors]",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 168,
          "function_name": "tensors_basics",
          "code": "text(\"You can create tensors in multiple ways:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can create tensors in multiple ways:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 169,
          "function_name": "tensors_basics",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1.0,
            2.0,
            3.0
          ],
          [
            4.0,
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 170,
          "function_name": "tensors_basics",
          "code": "x = torch.zeros(4, 8)  # 4x8 matrix of all zeros @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 171,
          "function_name": "tensors_basics",
          "code": "x = torch.ones(4, 8)  # 4x8 matrix of all ones @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ],
          [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ],
          [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ],
          [
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 172,
          "function_name": "tensors_basics",
          "code": "x = torch.randn(4, 8)  # 4x8 matrix of iid Normal(0, 1) samples @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            0.3788640797138214,
            0.3605419099330902,
            -0.9731622338294983,
            -0.6587660908699036,
            0.24312621355056763,
            0.4782480001449585,
            0.5388511419296265,
            -0.11475089192390442
          ],
          [
            1.1202397346496582,
            -0.33815404772758484,
            -0.40320003032684326,
            2.480670928955078,
            -1.2363144159317017,
            0.017163150012493134,
            0.919334888458252,
            0.3148987591266632
          ],
          [
            0.24466463923454285,
            -0.014129657298326492,
            -0.6210801005363464,
            0.49961283802986145,
            -1.5303471088409424,
            -0.43678274750709534,
            -0.17222563922405243,
            -1.4512207508087158
          ],
          [
            0.6417332291603088,
            1.1319788694381714,
            -0.7286664247512817,
            -1.0483930110931396,
            1.574371099472046,
            -1.5133249759674072,
            -0.29369494318962097,
            -0.5024314522743225
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 174,
          "function_name": "tensors_basics",
          "code": "text(\"Allocate but don't initialize the values:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Allocate but don't initialize the values:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 175,
          "function_name": "tensors_basics",
          "code": "x = torch.empty(4, 8)  # 4x8 matrix of uninitialized values @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1025301504.0,
            4.577341433717015e-41,
            -3.841203327187657e-31,
            4.577341433717015e-41,
            -1.3638858271936005e-11,
            3.190046262527056e-29,
            1030278144.0,
            4.577341433717015e-41
          ],
          [
            -3.841113049221514e-31,
            4.577341433717015e-41,
            -2.9565692002363675e+23,
            2.030107888636071e-38,
            1025311744.0,
            4.577341433717015e-41,
            -3.841173234532276e-31,
            4.577341433717015e-41
          ],
          [
            -4.8281070389526324e+23,
            5.316804280870476e+28,
            1030282240.0,
            4.577341433717015e-41,
            7.692742778052793e-25,
            4.5774815635634474e-41,
            2.1351192575026405e+24,
            -11606825984.0
          ],
          [
            1030286336.0,
            4.577341433717015e-41,
            6.79287336624908e-25,
            4.5774815635634474e-41,
            1.0145473709801127e-15,
            2.3942779726030354e+32,
            1030290432.0,
            4.577341433717015e-41
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 176,
          "function_name": "tensors_basics",
          "code": "text(\"...because you want to use some custom logic to set the values later\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...because you want to use some custom logic to set the values later",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 177,
          "function_name": "tensors_basics",
          "code": "nn.init.trunc_normal_(x, mean=0, std=1, a=-2, b=2)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            0.4926268458366394,
            -0.14309880137443542,
            -0.8276775479316711,
            1.9143977165222168,
            -0.7888385057449341,
            -1.654045820236206,
            0.8645772337913513,
            -0.49049511551856995
          ],
          [
            0.7150413393974304,
            -0.8133229613304138,
            -0.2188587784767151,
            -0.3146045506000519,
            0.4144287407398224,
            0.5696132779121399,
            -1.609192132949829,
            -0.3459394574165344
          ],
          [
            -0.19771766662597656,
            1.5419583320617676,
            -0.47150537371635437,
            -0.44278037548065186,
            -1.115066647529602,
            1.1719391345977783,
            1.4553605318069458,
            1.4979989528656006
          ],
          [
            -0.9895033836364746,
            -0.8328627347946167,
            1.4968796968460083,
            -0.2548467218875885,
            0.6678550243377686,
            -0.41625329852104187,
            -1.1494100093841553,
            1.7167211771011353
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 42,
          "function_name": "main",
          "code": "tensors_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 180,
          "function_name": "tensors_memory",
          "code": "def tensors_memory():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 181,
          "function_name": "tensors_memory",
          "code": "text(\"Almost everything (parameters, gradients, activations, optimizer states) are stored as floating point numbers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Almost everything (parameters, gradients, activations, optimizer states) are stored as floating point numbers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 183,
          "function_name": "tensors_memory",
          "code": "text(\"## float32\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## float32",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 184,
          "function_name": "tensors_memory",
          "code": "link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Wikipedia]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Single-precision_floating-point_format",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 185,
          "function_name": "tensors_memory",
          "code": "image(\"images/fp32.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/fp32.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 186,
          "function_name": "tensors_memory",
          "code": "text(\"The float32 data type (also known as fp32 or single precision) is the default.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The float32 data type (also known as fp32 or single precision) is the default.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 187,
          "function_name": "tensors_memory",
          "code": "text(\"Traditionally, in scientific computing, float32 is the baseline; you could use double precision (float64) in some cases.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Traditionally, in scientific computing, float32 is the baseline; you could use double precision (float64) in some cases.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 188,
          "function_name": "tensors_memory",
          "code": "text(\"In deep learning, you can be a lot sloppier.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In deep learning, you can be a lot sloppier.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 190,
          "function_name": "tensors_memory",
          "code": "text(\"Let's examine memory usage of these tensors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's examine memory usage of these tensors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 191,
          "function_name": "tensors_memory",
          "code": "text(\"Memory is determined by the (i) number of values and (ii) data type of each value.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Memory is determined by the (i) number of values and (ii) data type of each value.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 192,
          "function_name": "tensors_memory",
          "code": "x = torch.zeros(4, 8)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 193,
          "function_name": "tensors_memory",
          "code": "assert x.dtype == torch.float32  # Default type"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 194,
          "function_name": "tensors_memory",
          "code": "assert x.size() == torch.Size([4, 8])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 195,
          "function_name": "tensors_memory",
          "code": "assert x.numel() == 4 * 8"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 196,
          "function_name": "tensors_memory",
          "code": "assert x.element_size() == 4  # Float is 4 bytes"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 197,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(x) == 4 * 8 * 4  # 128 bytes"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 197,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(x) == 4 * 8 * 4  # 128 bytes"
        },
        {
          "path": "lecture_02.py",
          "line_number": 969,
          "function_name": "get_memory_usage",
          "code": "def get_memory_usage(x: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 197,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(x) == 4 * 8 * 4  # 128 bytes"
        },
        {
          "path": "lecture_02.py",
          "line_number": 970,
          "function_name": "get_memory_usage",
          "code": "return x.numel() * x.element_size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 197,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(x) == 4 * 8 * 4  # 128 bytes"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 199,
          "function_name": "tensors_memory",
          "code": "text(\"One matrix in the feedforward layer of GPT-3:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "One matrix in the feedforward layer of GPT-3:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 200,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(torch.empty(12288 * 4, 12288)) == 2304 * 1024 * 1024  # 2.3 GB"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 200,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(torch.empty(12288 * 4, 12288)) == 2304 * 1024 * 1024  # 2.3 GB"
        },
        {
          "path": "lecture_02.py",
          "line_number": 969,
          "function_name": "get_memory_usage",
          "code": "def get_memory_usage(x: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 200,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(torch.empty(12288 * 4, 12288)) == 2304 * 1024 * 1024  # 2.3 GB"
        },
        {
          "path": "lecture_02.py",
          "line_number": 970,
          "function_name": "get_memory_usage",
          "code": "return x.numel() * x.element_size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 200,
          "function_name": "tensors_memory",
          "code": "assert get_memory_usage(torch.empty(12288 * 4, 12288)) == 2304 * 1024 * 1024  # 2.3 GB"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 201,
          "function_name": "tensors_memory",
          "code": "text(\"...which is a lot!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...which is a lot!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 203,
          "function_name": "tensors_memory",
          "code": "text(\"## float16\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## float16",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 204,
          "function_name": "tensors_memory",
          "code": "link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Wikipedia]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Half-precision_floating-point_format",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 205,
          "function_name": "tensors_memory",
          "code": "image(\"images/fp16.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/fp16.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 206,
          "function_name": "tensors_memory",
          "code": "text(\"The float16 data type (also known as fp16 or half precision) cuts down the memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The float16 data type (also known as fp16 or half precision) cuts down the memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 207,
          "function_name": "tensors_memory",
          "code": "x = torch.zeros(4, 8, dtype=torch.float16)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 208,
          "function_name": "tensors_memory",
          "code": "assert x.element_size() == 2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 209,
          "function_name": "tensors_memory",
          "code": "text(\"However, the dynamic range (especially for small numbers) isn't great.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "However, the dynamic range (especially for small numbers) isn't great.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 210,
          "function_name": "tensors_memory",
          "code": "x = torch.tensor([1e-8], dtype=torch.float16)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          0.0
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 211,
          "function_name": "tensors_memory",
          "code": "assert x == 0  # Underflow!"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 212,
          "function_name": "tensors_memory",
          "code": "text(\"If this happens when you train, you can get instability.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If this happens when you train, you can get instability.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 214,
          "function_name": "tensors_memory",
          "code": "text(\"## bfloat16\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## bfloat16",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 215,
          "function_name": "tensors_memory",
          "code": "link(title=\"[Wikipedia]\", url=\"https://en.wikipedia.org/wiki/Bfloat16_floating-point_format\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Wikipedia]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Bfloat16_floating-point_format",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 216,
          "function_name": "tensors_memory",
          "code": "image(\"images/bf16.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/bf16.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 217,
          "function_name": "tensors_memory",
          "code": "text(\"Google Brian developed bfloat (brain floating point) in 2018 to address this issue.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Google Brian developed bfloat (brain floating point) in 2018 to address this issue.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 218,
          "function_name": "tensors_memory",
          "code": "text(\"bfloat16 uses the same memory as float16 but has the same dynamic range as float32!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "bfloat16 uses the same memory as float16 but has the same dynamic range as float32!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 219,
          "function_name": "tensors_memory",
          "code": "text(\"The only catch is that the resolution is worse, but this matters less for deep learning.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The only catch is that the resolution is worse, but this matters less for deep learning.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 220,
          "function_name": "tensors_memory",
          "code": "x = torch.tensor([1e-8], dtype=torch.bfloat16)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          1.0011717677116394e-08
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 221,
          "function_name": "tensors_memory",
          "code": "assert x != 0  # No underflow!"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 223,
          "function_name": "tensors_memory",
          "code": "text(\"Let's compare the dynamic ranges and memory usage of the different data types:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's compare the dynamic ranges and memory usage of the different data types:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 224,
          "function_name": "tensors_memory",
          "code": "float32_info = torch.finfo(torch.float32)  # @inspect float32_info"
        }
      ],
      "env": {
        "float32_info": "finfo(resolution=1e-06, min=-3.40282e+38, max=3.40282e+38, eps=1.19209e-07, smallest_normal=1.17549e-38, tiny=1.17549e-38, dtype=float32)"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 225,
          "function_name": "tensors_memory",
          "code": "float16_info = torch.finfo(torch.float16)  # @inspect float16_info"
        }
      ],
      "env": {
        "float16_info": "finfo(resolution=0.001, min=-65504, max=65504, eps=0.000976562, smallest_normal=6.10352e-05, tiny=6.10352e-05, dtype=float16)"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 226,
          "function_name": "tensors_memory",
          "code": "bfloat16_info = torch.finfo(torch.bfloat16)  # @inspect bfloat16_info"
        }
      ],
      "env": {
        "bfloat16_info": "finfo(resolution=0.01, min=-3.38953e+38, max=3.38953e+38, eps=0.0078125, smallest_normal=1.17549e-38, tiny=1.17549e-38, dtype=bfloat16)"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 228,
          "function_name": "tensors_memory",
          "code": "text(\"## fp8\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## fp8",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 229,
          "function_name": "tensors_memory",
          "code": "text(\"In 2022, FP8 was standardized, motivated by machine learning workloads.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In 2022, FP8 was standardized, motivated by machine learning workloads.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 230,
          "function_name": "tensors_memory",
          "code": "link(\"https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/examples/fp8_primer.html\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/examples/fp8_primer.html",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 231,
          "function_name": "tensors_memory",
          "code": "image(\"https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/_images/fp8_formats.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-df6d7649a3bdb77cfdc38092d8387a99-https_docs_nvidia_com_deeplearning_transformer-engine_user-guide__images_fp8_formats_png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 232,
          "function_name": "tensors_memory",
          "code": "text(\"H100s support two variants of FP8: E4M3 (range [-448, 448]) and E5M2 ([-57344, 57344]).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "H100s support two variants of FP8: E4M3 (range [-448, 448]) and E5M2 ([-57344, 57344]).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 233,
          "function_name": "tensors_memory",
          "code": "text(\"Reference: \"), link(\"https://arxiv.org/pdf/2209.05433.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Reference: ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "FP8 Formats for Deep Learning",
            "authors": [
              "Paulius Micikevicius",
              "Dusan Stosic",
              "Neil Burgess",
              "Marius Cornea",
              "Pradeep Dubey",
              "Richard Grisenthwaite",
              "Sangwon Ha",
              "Alexander Heinecke",
              "Patrick Judd",
              "John Kamalu",
              "Naveen Mellempudi",
              "Stuart Oberman",
              "Mohammad Shoeybi",
              "Michael Siu",
              "Hao Wu"
            ],
            "organization": null,
            "date": "2022-09-12T17:39:55Z",
            "url": "https://arxiv.org/pdf/2209.05433.pdf",
            "description": "FP8 is a natural progression for accelerating deep learning training inference beyond the 16-bit formats common in modern processors. In this paper we propose an 8-bit floating point (FP8) binary interchange format consisting of two encodings - E4M3 (4-bit exponent and 3-bit mantissa) and E5M2 (5-bit exponent and 2-bit mantissa). While E5M2 follows IEEE 754 conventions for representatio of special values, E4M3's dynamic range is extended by not representing infinities and having only one mantissa bit-pattern for NaNs. We demonstrate the efficacy of the FP8 format on a variety of image and language tasks, effectively matching the result quality achieved by 16-bit training sessions. Our study covers the main modern neural network architectures - CNNs, RNNs, and Transformer-based models, leaving all the hyperparameters unchanged from the 16-bit baseline training sessions. Our training experiments include large, up to 175B parameter, language models. We also examine FP8 post-training-quantization of language models trained using 16-bit formats that resisted fixed point int8 quantization.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 235,
          "function_name": "tensors_memory",
          "code": "text(\"Implications on training:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Implications on training:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 236,
          "function_name": "tensors_memory",
          "code": "text(\"- Training with float32 works, but requires lots of memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Training with float32 works, but requires lots of memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 237,
          "function_name": "tensors_memory",
          "code": "text(\"- Training with fp8, float16 and even bfloat16 is risky, and you can get instability.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Training with fp8, float16 and even bfloat16 is risky, and you can get instability.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 238,
          "function_name": "tensors_memory",
          "code": "text(\"- Solution (later): use mixed precision training, see \"), link(mixed_precision_training)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Solution (later): use mixed precision training, see ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": "mixed_precision_training",
          "style": {},
          "external_link": null,
          "internal_link": {
            "path": "lecture_02.py",
            "line_number": 944
          }
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 43,
          "function_name": "main",
          "code": "tensors_memory()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 45,
          "function_name": "main",
          "code": "text(\"## Compute accounting\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Compute accounting",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 241,
          "function_name": "tensors_on_gpus",
          "code": "def tensors_on_gpus():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 242,
          "function_name": "tensors_on_gpus",
          "code": "text(\"By default, tensors are stored in CPU memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "By default, tensors are stored in CPU memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 243,
          "function_name": "tensors_on_gpus",
          "code": "x = torch.zeros(4, 8)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 244,
          "function_name": "tensors_on_gpus",
          "code": "assert x.device == torch.device(\"cpu\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 246,
          "function_name": "tensors_on_gpus",
          "code": "text(\"However, in order to take advantage of the massive parallelism of GPUs, we need to move them to GPU memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "However, in order to take advantage of the massive parallelism of GPUs, we need to move them to GPU memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 247,
          "function_name": "tensors_on_gpus",
          "code": "image(\"https://www.researchgate.net/publication/338984158/figure/fig2/AS:854027243900928@1580627370716/Communication-between-host-CPU-and-GPU.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-390a0af64ffbd70ee5dd0189092ce741-https_www_researchgate_net_publication_338984158_figure_fig2_AS_854027243900928_1580627370716_Communication-between-host-CPU-and-GPU_png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 249,
          "function_name": "tensors_on_gpus",
          "code": "text(\"Let's first see if we have any GPUs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's first see if we have any GPUs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 250,
          "function_name": "tensors_on_gpus",
          "code": "if not torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 253,
          "function_name": "tensors_on_gpus",
          "code": "num_gpus = torch.cuda.device_count()  # @inspect num_gpus"
        }
      ],
      "env": {
        "num_gpus": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 254,
          "function_name": "tensors_on_gpus",
          "code": "for i in range(num_gpus):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 255,
          "function_name": "tensors_on_gpus",
          "code": "properties = torch.cuda.get_device_properties(i)  # @inspect properties"
        }
      ],
      "env": {
        "properties": "_CudaDeviceProperties(name='NVIDIA H100 80GB HBM3', major=9, minor=0, total_memory=81090MB, multi_processor_count=132, uuid=11e219ad-188d-7e39-bf14-e59e9c1f25d2, L2_cache_size=50MB)"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 254,
          "function_name": "tensors_on_gpus",
          "code": "for i in range(num_gpus):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 257,
          "function_name": "tensors_on_gpus",
          "code": "memory_allocated = torch.cuda.memory_allocated()  # @inspect memory_allocated"
        }
      ],
      "env": {
        "memory_allocated": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 259,
          "function_name": "tensors_on_gpus",
          "code": "text(\"Move the tensor to GPU memory (device 0).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Move the tensor to GPU memory (device 0).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 260,
          "function_name": "tensors_on_gpus",
          "code": "y = x.to(\"cuda:0\")  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 261,
          "function_name": "tensors_on_gpus",
          "code": "assert y.device == torch.device(\"cuda\", 0)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 263,
          "function_name": "tensors_on_gpus",
          "code": "text(\"Create a tensor directly on the GPU:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Create a tensor directly on the GPU:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 264,
          "function_name": "tensors_on_gpus",
          "code": "z = torch.zeros(4, 8, device=\"cuda:0\")  # @inspect z"
        }
      ],
      "env": {
        "z": [
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ],
          [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 266,
          "function_name": "tensors_on_gpus",
          "code": "new_memory_allocated = torch.cuda.memory_allocated()  # @inspect new_memory_allocated"
        }
      ],
      "env": {
        "new_memory_allocated": 1024
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 267,
          "function_name": "tensors_on_gpus",
          "code": "text(f\"GPU memory used (for y and z): {new_memory_allocated}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "GPU memory used (for y and z): 1024",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 268,
          "function_name": "tensors_on_gpus",
          "code": "memory_used = new_memory_allocated - memory_allocated  # @inspect memory_used"
        }
      ],
      "env": {
        "memory_used": 1024
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 46,
          "function_name": "main",
          "code": "tensors_on_gpus()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 271,
          "function_name": "tensor_operations",
          "code": "def tensor_operations():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 272,
          "function_name": "tensor_operations",
          "code": "text(\"Most tensors are created from performing operations on other tensors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Most tensors are created from performing operations on other tensors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 273,
          "function_name": "tensor_operations",
          "code": "text(\"Each operation has some memory and compute consequence.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each operation has some memory and compute consequence.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 275,
          "function_name": "tensor_operations",
          "code": "text(\"## Storage\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Storage",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 277,
          "function_name": "tensor_operations",
          "code": "text(\"Pytorch tensors are really pointers into allocated memory with metadata describing how to get to any element of the tensor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Pytorch tensors are really pointers into allocated memory with metadata describing how to get to any element of the tensor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 278,
          "function_name": "tensor_operations",
          "code": "image(\"https://martinlwx.github.io/img/2D_tensor_strides.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-97aa05a6701b46521cb8a7c1e096c7e7-https_martinlwx_github_io_img_2D_tensor_strides_png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 279,
          "function_name": "tensor_operations",
          "code": "link(title=\"[PyTorch docs]\", url=\"https://pytorch.org/docs/stable/generated/torch.Tensor.stride.html\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[PyTorch docs]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://pytorch.org/docs/stable/generated/torch.Tensor.stride.html",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 280,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 282,
          "function_name": "tensor_operations",
          "code": "text(\"To go to the next row (dim 0), skip 3 elements.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To go to the next row (dim 0), skip 3 elements.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 283,
          "function_name": "tensor_operations",
          "code": "assert x.stride(0) == 3"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 285,
          "function_name": "tensor_operations",
          "code": "text(\"To go to the next column (dim 1), skip 1 element.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To go to the next column (dim 1), skip 1 element.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 286,
          "function_name": "tensor_operations",
          "code": "assert x.stride(1) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 288,
          "function_name": "tensor_operations",
          "code": "text(\"## Slicing and dicing\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Slicing and dicing",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 290,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 292,
          "function_name": "tensor_operations",
          "code": "text(\"Many operations simply provide a different *view* of the tensor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Many operations simply provide a different *view* of the tensor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 293,
          "function_name": "tensor_operations",
          "code": "text(\"This does not make a copy, and therefore mutations in one tensor affects the other.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This does not make a copy, and therefore mutations in one tensor affects the other.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 294,
          "function_name": "tensor_operations",
          "code": "y = x[0]  # @inspect y"
        }
      ],
      "env": {
        "y": [
          1.0,
          2.0,
          3.0
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 295,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(y, torch.tensor([1., 2, 3]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 296,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 296,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 296,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 296,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 298,
          "function_name": "tensor_operations",
          "code": "y = x[:, 1]  # @inspect y"
        }
      ],
      "env": {
        "y": [
          2.0,
          5.0
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 299,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(y, torch.tensor([2, 5]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 300,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 300,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 300,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 300,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 302,
          "function_name": "tensor_operations",
          "code": "y = x.view(3, 2)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            1.0,
            2.0
          ],
          [
            3.0,
            4.0
          ],
          [
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 303,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(y, torch.tensor([[1, 2], [3, 4], [5, 6]]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 304,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 304,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 304,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 304,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 306,
          "function_name": "tensor_operations",
          "code": "y = x.transpose(1, 0)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            1.0,
            4.0
          ],
          [
            2.0,
            5.0
          ],
          [
            3.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 307,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(y, torch.tensor([[1, 4], [2, 5], [3, 6]]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 308,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 308,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 308,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 308,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 310,
          "function_name": "tensor_operations",
          "code": "text(\"Check that mutating x also mutates y.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Check that mutating x also mutates y.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 311,
          "function_name": "tensor_operations",
          "code": "x[0][0] = 100  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            100.0,
            2.0,
            3.0
          ],
          [
            4.0,
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 312,
          "function_name": "tensor_operations",
          "code": "assert y[0][0] == 100  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            100.0,
            4.0
          ],
          [
            2.0,
            5.0
          ],
          [
            3.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 314,
          "function_name": "tensor_operations",
          "code": "text(\"Note that some views are non-contiguous entries, which means that further views aren't possible.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that some views are non-contiguous entries, which means that further views aren't possible.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 315,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1.0,
            2.0,
            3.0
          ],
          [
            4.0,
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 316,
          "function_name": "tensor_operations",
          "code": "y = x.transpose(1, 0)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            1.0,
            4.0
          ],
          [
            2.0,
            5.0
          ],
          [
            3.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 317,
          "function_name": "tensor_operations",
          "code": "assert not y.is_contiguous()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 318,
          "function_name": "tensor_operations",
          "code": "try:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 319,
          "function_name": "tensor_operations",
          "code": "y.view(2, 3)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 321,
          "function_name": "tensor_operations",
          "code": "except RuntimeError as e:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 322,
          "function_name": "tensor_operations",
          "code": "assert \"view size is not compatible with input tensor's size and stride\" in str(e)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 324,
          "function_name": "tensor_operations",
          "code": "text(\"One can use reshape, which behaves like view if a copy is not needed...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "One can use reshape, which behaves like view if a copy is not needed...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 325,
          "function_name": "tensor_operations",
          "code": "y = x.reshape(3, 2)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            1.0,
            2.0
          ],
          [
            3.0,
            4.0
          ],
          [
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 326,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 326,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 326,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 326,
          "function_name": "tensor_operations",
          "code": "assert same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 328,
          "function_name": "tensor_operations",
          "code": "text(\"...or else makes a copy (different storage) if needed.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...or else makes a copy (different storage) if needed.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 329,
          "function_name": "tensor_operations",
          "code": "y = x.transpose(1, 0).reshape(6)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          1.0,
          4.0,
          2.0,
          5.0,
          3.0,
          6.0
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 330,
          "function_name": "tensor_operations",
          "code": "assert not same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 330,
          "function_name": "tensor_operations",
          "code": "assert not same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 999,
          "function_name": "same_storage",
          "code": "def same_storage(x: torch.Tensor, y: torch.Tensor):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 330,
          "function_name": "tensor_operations",
          "code": "assert not same_storage(x, y)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1000,
          "function_name": "same_storage",
          "code": "return x.untyped_storage().data_ptr() == y.untyped_storage().data_ptr()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 330,
          "function_name": "tensor_operations",
          "code": "assert not same_storage(x, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 331,
          "function_name": "tensor_operations",
          "code": "text(\"Views are free, copying take both (additional) memory and compute.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Views are free, copying take both (additional) memory and compute.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 333,
          "function_name": "tensor_operations",
          "code": "text(\"Now for the operations that make a copy...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now for the operations that make a copy...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 335,
          "function_name": "tensor_operations",
          "code": "text(\"## Elementwise operations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Elementwise operations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 336,
          "function_name": "tensor_operations",
          "code": "text(\"These operations apply some operation to each element of the tensor and return a (new) tensor of the same shape.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "These operations apply some operation to each element of the tensor and return a (new) tensor of the same shape.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 337,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([1, 4, 9])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 338,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x.pow(2), torch.tensor([1, 16, 81]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 339,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x.sqrt(), torch.tensor([1, 2, 3]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 340,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x.rsqrt(), torch.tensor([1, 1 / 2, 1 / 3]))  # i -> 1/sqrt(x_i)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 342,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x + x, torch.tensor([2, 8, 18]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 343,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x * 2, torch.tensor([2, 8, 18]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 344,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x / 0.5, torch.tensor([2, 8, 18]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 346,
          "function_name": "tensor_operations",
          "code": "text(\"`triu` takes the upper triangular part of a matrix.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "`triu` takes the upper triangular part of a matrix.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 347,
          "function_name": "tensor_operations",
          "code": "text(\"This is useful for computing an causal attention mask, where M[i, j] is the contribution of i to j.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is useful for computing an causal attention mask, where M[i, j] is the contribution of i to j.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 348,
          "function_name": "tensor_operations",
          "code": "x = torch.ones(3, 3).triu()  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1.0,
            1.0,
            1.0
          ],
          [
            0.0,
            1.0,
            1.0
          ],
          [
            0.0,
            0.0,
            1.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 349,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x, torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 350,
          "function_name": "tensor_operations",
          "code": "[1, 1, 1],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 351,
          "function_name": "tensor_operations",
          "code": "[0, 1, 1],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 352,
          "function_name": "tensor_operations",
          "code": "[0, 0, 1]],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 349,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(x, torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 355,
          "function_name": "tensor_operations",
          "code": "text(\"## Aggregate operations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Aggregate operations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 357,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            1.0,
            2.0,
            3.0
          ],
          [
            4.0,
            5.0,
            6.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 359,
          "function_name": "tensor_operations",
          "code": "text(\"By default, mean aggregates over the entire matrix.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "By default, mean aggregates over the entire matrix.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 360,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.mean(x), torch.tensor(3.5))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 362,
          "function_name": "tensor_operations",
          "code": "text(\"We can aggregate only over a subset of the dimensions by specifying `dim`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can aggregate only over a subset of the dimensions by specifying `dim`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 363,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.mean(x, dim=1), torch.tensor([2, 5]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 365,
          "function_name": "tensor_operations",
          "code": "text(\"Variance has the same form factor as mean.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Variance has the same form factor as mean.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 366,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.var(torch.tensor([-10., 10])), torch.tensor(200))  # Note: Bessel corrected"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 368,
          "function_name": "tensor_operations",
          "code": "text(\"## Batching\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Batching",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 370,
          "function_name": "tensor_operations",
          "code": "image(\"images/batch-sequence.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/batch-sequence.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 371,
          "function_name": "tensor_operations",
          "code": "text(\"As a general rule, matrix multiplications are very optimized, so the more we can build up things into a single matrix operation, the better.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As a general rule, matrix multiplications are very optimized, so the more we can build up things into a single matrix operation, the better.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 373,
          "function_name": "tensor_operations",
          "code": "text(\"### `stack`\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### `stack`",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 374,
          "function_name": "tensor_operations",
          "code": "text(\"The `stack` operation adds a new dimension indexing the tensor we're stacking.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The `stack` operation adds a new dimension indexing the tensor we're stacking.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 375,
          "function_name": "tensor_operations",
          "code": "text(\"You can use `stack` given a set of data points, create a batch dimension.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can use `stack` given a set of data points, create a batch dimension.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 376,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 377,
          "function_name": "tensor_operations",
          "code": "[1., 2, 3],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 378,
          "function_name": "tensor_operations",
          "code": "[4, 5, 6],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 376,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 380,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.stack([x, x], dim=0), torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 382,
          "function_name": "tensor_operations",
          "code": "[1, 2, 3],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 383,
          "function_name": "tensor_operations",
          "code": "[4, 5, 6],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 381,
          "function_name": "tensor_operations",
          "code": "["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 386,
          "function_name": "tensor_operations",
          "code": "[1, 2, 3],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 387,
          "function_name": "tensor_operations",
          "code": "[4, 5, 6],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 385,
          "function_name": "tensor_operations",
          "code": "["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 380,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.stack([x, x], dim=0), torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 391,
          "function_name": "tensor_operations",
          "code": "text(\"### `cat`\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### `cat`",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 392,
          "function_name": "tensor_operations",
          "code": "text(\"The `cat` operation concatenates two tensors along some dimension and does not add another dimension\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The `cat` operation concatenates two tensors along some dimension and does not add another dimension",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 393,
          "function_name": "tensor_operations",
          "code": "text(\"This is useful for combining batching multiple matrix operations (e.g., Q, K, V in attention).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is useful for combining batching multiple matrix operations (e.g., Q, K, V in attention).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 394,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 395,
          "function_name": "tensor_operations",
          "code": "[1, 2, 3],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 396,
          "function_name": "tensor_operations",
          "code": "[4, 5, 6],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 394,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 398,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.cat([x, x], dim=1), torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 399,
          "function_name": "tensor_operations",
          "code": "[1, 2, 3, 1, 2, 3],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 400,
          "function_name": "tensor_operations",
          "code": "[4, 5, 6, 4, 5, 6],"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 398,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.cat([x, x], dim=1), torch.tensor(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 403,
          "function_name": "tensor_operations",
          "code": "text(\"You can also unbatch using `tensor_split`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can also unbatch using `tensor_split`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 404,
          "function_name": "tensor_operations",
          "code": "list_x = [x, x, x]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 405,
          "function_name": "tensor_operations",
          "code": "roundtrip_list_x = torch.tensor_split(torch.cat(list_x, dim=1), 3, dim=1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 406,
          "function_name": "tensor_operations",
          "code": "assert all(torch.equal(a, b) for a, b in zip(list_x, roundtrip_list_x))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 406,
          "function_name": "tensor_operations",
          "code": "assert all(torch.equal(a, b) for a, b in zip(list_x, roundtrip_list_x))"
        },
        {
          "path": "lecture_02.py",
          "line_number": 406,
          "function_name": "<genexpr>",
          "code": "assert all(torch.equal(a, b) for a, b in zip(list_x, roundtrip_list_x))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 406,
          "function_name": "tensor_operations",
          "code": "assert all(torch.equal(a, b) for a, b in zip(list_x, roundtrip_list_x))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 408,
          "function_name": "tensor_operations",
          "code": "text(\"### `squeeze`, `unsqueeze`\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### `squeeze`, `unsqueeze`",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 409,
          "function_name": "tensor_operations",
          "code": "text(\"Squeezing and unsqueezing simply add or a remove a dimension.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Squeezing and unsqueezing simply add or a remove a dimension.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 410,
          "function_name": "tensor_operations",
          "code": "x = torch.tensor([1, 2, 3])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 412,
          "function_name": "tensor_operations",
          "code": "text(\"Unsqueeze adds a dimension.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Unsqueeze adds a dimension.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 413,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.unsqueeze(x, dim=0), torch.tensor([[1, 2, 3]]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 415,
          "function_name": "tensor_operations",
          "code": "text(\"Squeeze removes a dimension.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Squeeze removes a dimension.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 416,
          "function_name": "tensor_operations",
          "code": "assert torch.equal(torch.squeeze(torch.unsqueeze(x, dim=0)), x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 418,
          "function_name": "tensor_operations",
          "code": "text(\"## Matrix multiplication\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Matrix multiplication",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 420,
          "function_name": "tensor_operations",
          "code": "text(\"Finally, the bread and butter of deep learning: matrix multiplication.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Finally, the bread and butter of deep learning: matrix multiplication.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 421,
          "function_name": "tensor_operations",
          "code": "text(\"Note that the first matrix could have an dimensions (batch, sequence length).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that the first matrix could have an dimensions (batch, sequence length).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 422,
          "function_name": "tensor_operations",
          "code": "x = torch.ones(4, 4, 16, 32)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 423,
          "function_name": "tensor_operations",
          "code": "y = torch.ones(32, 16)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 424,
          "function_name": "tensor_operations",
          "code": "z = x @ y"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 425,
          "function_name": "tensor_operations",
          "code": "assert z.size() == torch.Size([4, 4, 16, 16])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 47,
          "function_name": "main",
          "code": "tensor_operations()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 86,
          "function_name": "tensor_einops",
          "code": "def tensor_einops():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 99,
          "function_name": "einops_motivation",
          "code": "def einops_motivation():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 100,
          "function_name": "einops_motivation",
          "code": "text(\"Traditional PyTorch code:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Traditional PyTorch code:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 101,
          "function_name": "einops_motivation",
          "code": "x = torch.ones(2, 2, 3)  # batch, sequence, features  @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 102,
          "function_name": "einops_motivation",
          "code": "y = torch.ones(2, 2, 3)  # batch, sequence, features  @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            [
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 103,
          "function_name": "einops_motivation",
          "code": "z = x @ y.transpose(-2, -1)  # batch, sequence, sequence  @inspect z"
        }
      ],
      "env": {
        "z": [
          [
            [
              3.0,
              3.0
            ],
            [
              3.0,
              3.0
            ]
          ],
          [
            [
              3.0,
              3.0
            ],
            [
              3.0,
              3.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 104,
          "function_name": "einops_motivation",
          "code": "text(\"Easy to mess up the dimensions (what is -2, -1?)...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Easy to mess up the dimensions (what is -2, -1?)...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 87,
          "function_name": "tensor_einops",
          "code": "einops_motivation()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 89,
          "function_name": "tensor_einops",
          "code": "text(\"Einops is a library for manipulating tensors where dimensions are named.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Einops is a library for manipulating tensors where dimensions are named.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 90,
          "function_name": "tensor_einops",
          "code": "text(\"It is inspired by Einstein summation notation (Einstein, 1916).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "It is inspired by Einstein summation notation (Einstein, 1916).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 91,
          "function_name": "tensor_einops",
          "code": "link(title=\"[Einops tutorial]\", url=\"https://einops.rocks/1-einops-basics/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Einops tutorial]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://einops.rocks/1-einops-basics/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 107,
          "function_name": "jaxtyping_basics",
          "code": "def jaxtyping_basics():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 108,
          "function_name": "jaxtyping_basics",
          "code": "text(\"How do you keep track of tensor dimensions?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do you keep track of tensor dimensions?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 110,
          "function_name": "jaxtyping_basics",
          "code": "text(\"Old way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Old way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 111,
          "function_name": "jaxtyping_basics",
          "code": "x = torch.ones(2, 2, 1, 3)  # batch x seq x heads x hidden  @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ]
          ],
          [
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 113,
          "function_name": "jaxtyping_basics",
          "code": "text(\"New (jaxtyping) way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "New (jaxtyping) way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 114,
          "function_name": "jaxtyping_basics",
          "code": "x: Float[torch.Tensor, \"batch seq heads hidden\"] = torch.ones(2, 2, 1, 3)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ]
          ],
          [
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0
              ]
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 115,
          "function_name": "jaxtyping_basics",
          "code": "text(\"Note: this is just documentation (no enforcement).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: this is just documentation (no enforcement).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 93,
          "function_name": "tensor_einops",
          "code": "jaxtyping_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 118,
          "function_name": "einops_einsum",
          "code": "def einops_einsum():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 119,
          "function_name": "einops_einsum",
          "code": "text(\"Einsum is generalized matrix multiplication with good bookkeeping.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Einsum is generalized matrix multiplication with good bookkeeping.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 121,
          "function_name": "einops_einsum",
          "code": "text(\"Define two tensors:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Define two tensors:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 122,
          "function_name": "einops_einsum",
          "code": "x: Float[torch.Tensor, \"batch seq1 hidden\"] = torch.ones(2, 3, 4)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 123,
          "function_name": "einops_einsum",
          "code": "y: Float[torch.Tensor, \"batch seq2 hidden\"] = torch.ones(2, 3, 4)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 125,
          "function_name": "einops_einsum",
          "code": "text(\"Old way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Old way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 126,
          "function_name": "einops_einsum",
          "code": "z = x @ y.transpose(-2, -1)  # batch, sequence, sequence  @inspect z"
        }
      ],
      "env": {
        "z": [
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ],
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 128,
          "function_name": "einops_einsum",
          "code": "text(\"New (einops) way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "New (einops) way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 129,
          "function_name": "einops_einsum",
          "code": "z = einsum(x, y, \"batch seq1 hidden, batch seq2 hidden -> batch seq1 seq2\")  # @inspect z"
        }
      ],
      "env": {
        "z": [
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ],
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 130,
          "function_name": "einops_einsum",
          "code": "text(\"Dimensions that are not named in the output are summed over.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Dimensions that are not named in the output are summed over.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 132,
          "function_name": "einops_einsum",
          "code": "text(\"Or can use `...` to represent broadcasting over any number of dimensions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Or can use `...` to represent broadcasting over any number of dimensions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 133,
          "function_name": "einops_einsum",
          "code": "z = einsum(x, y, \"... seq1 hidden, ... seq2 hidden -> ... seq1 seq2\")  # @inspect z"
        }
      ],
      "env": {
        "z": [
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ],
          [
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 94,
          "function_name": "tensor_einops",
          "code": "einops_einsum()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 136,
          "function_name": "einops_reduce",
          "code": "def einops_reduce():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 137,
          "function_name": "einops_reduce",
          "code": "text(\"You can reduce a single tensor via some operation (e.g., sum, mean, max, min).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can reduce a single tensor via some operation (e.g., sum, mean, max, min).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 138,
          "function_name": "einops_reduce",
          "code": "x: Float[torch.Tensor, \"batch seq hidden\"] = torch.ones(2, 3, 4)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 140,
          "function_name": "einops_reduce",
          "code": "text(\"Old way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Old way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 141,
          "function_name": "einops_reduce",
          "code": "y = x.mean(dim=-1)  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            1.0,
            1.0,
            1.0
          ],
          [
            1.0,
            1.0,
            1.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 143,
          "function_name": "einops_reduce",
          "code": "text(\"New (einops) way:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "New (einops) way:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 144,
          "function_name": "einops_reduce",
          "code": "y = reduce(x, \"... hidden -> ...\", \"sum\")  # @inspect y"
        }
      ],
      "env": {
        "y": [
          [
            4.0,
            4.0,
            4.0
          ],
          [
            4.0,
            4.0,
            4.0
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 95,
          "function_name": "tensor_einops",
          "code": "einops_reduce()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 147,
          "function_name": "einops_rearrange",
          "code": "def einops_rearrange():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 148,
          "function_name": "einops_rearrange",
          "code": "text(\"Sometimes, some dimensions represent two dimensions and you want to operate on one of them.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Sometimes, some dimensions represent two dimensions and you want to operate on one of them.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 150,
          "function_name": "einops_rearrange",
          "code": "x: Float[torch.Tensor, \"batch seq total_hidden\"] = torch.ones(2, 3, 8)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ],
          [
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ],
            [
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0,
              1.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 151,
          "function_name": "einops_rearrange",
          "code": "text(\"...where `total_hidden` is a flattened representation of `heads * hidden1`\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...where `total_hidden` is a flattened representation of `heads * hidden1`",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 152,
          "function_name": "einops_rearrange",
          "code": "w: Float[torch.Tensor, \"hidden1 hidden2\"] = torch.ones(4, 4)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 154,
          "function_name": "einops_rearrange",
          "code": "text(\"Break up `total_hidden` into two dimensions (`heads` and `hidden1`):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Break up `total_hidden` into two dimensions (`heads` and `hidden1`):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 155,
          "function_name": "einops_rearrange",
          "code": "x = rearrange(x, \"... (heads hidden1) -> ... heads hidden1\", heads=2)  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ]
          ],
          [
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ],
            [
              [
                1.0,
                1.0,
                1.0,
                1.0
              ],
              [
                1.0,
                1.0,
                1.0,
                1.0
              ]
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 157,
          "function_name": "einops_rearrange",
          "code": "text(\"Perform the transformation by `w`:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Perform the transformation by `w`:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 158,
          "function_name": "einops_rearrange",
          "code": "x = einsum(x, w, \"... hidden1, hidden1 hidden2 -> ... hidden2\")  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ],
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ],
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ]
          ],
          [
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ],
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ],
            [
              [
                4.0,
                4.0,
                4.0,
                4.0
              ],
              [
                4.0,
                4.0,
                4.0,
                4.0
              ]
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 160,
          "function_name": "einops_rearrange",
          "code": "text(\"Combine `heads` and `hidden2` back together:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Combine `heads` and `hidden2` back together:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 161,
          "function_name": "einops_rearrange",
          "code": "x = rearrange(x, \"... heads hidden2 -> ... (heads hidden2)\")  # @inspect x"
        }
      ],
      "env": {
        "x": [
          [
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ]
          ],
          [
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ],
            [
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0,
              4.0
            ]
          ]
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 96,
          "function_name": "tensor_einops",
          "code": "einops_rearrange()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 48,
          "function_name": "main",
          "code": "tensor_einops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 428,
          "function_name": "tensor_operations_flops",
          "code": "def tensor_operations_flops():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 429,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Having gone through all the operations, let us examine their computational cost.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Having gone through all the operations, let us examine their computational cost.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 431,
          "function_name": "tensor_operations_flops",
          "code": "text(\"A floating-point operation (FLOP) is a basic operation like addition (x + y) or multiplication (x y).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A floating-point operation (FLOP) is a basic operation like addition (x + y) or multiplication (x y).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 433,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Two terribly confusing acronyms (pronounced the same!):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Two terribly confusing acronyms (pronounced the same!):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 434,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- FLOPs: floating-point operations (measure of computation done)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- FLOPs: floating-point operations (measure of computation done)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 435,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- FLOP/s: floating-point operations per second (also written as FLOPS), which is used to measure the speed of hardware.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- FLOP/s: floating-point operations per second (also written as FLOPS), which is used to measure the speed of hardware.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 436,
          "function_name": "tensor_operations_flops",
          "code": "text(\"By default, we will talk about FLOPs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "By default, we will talk about FLOPs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 438,
          "function_name": "tensor_operations_flops",
          "code": "text(\"## Intuitions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Intuitions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 440,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Training GPT-3 took 3.14e23 FLOPs. \"), article_link(\"https://lambdalabs.com/blog/demystifying-gpt-3\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training GPT-3 took 3.14e23 FLOPs. ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://lambdalabs.com/blog/demystifying-gpt-3",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 441,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Training GPT-4 is speculated to take 2e25 FLOPs\"), article_link(\"https://patmcguinness.substack.com/p/gpt-4-details-revealed\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training GPT-4 is speculated to take 2e25 FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://patmcguinness.substack.com/p/gpt-4-details-revealed",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 442,
          "function_name": "tensor_operations_flops",
          "code": "text(\"US executive order: any foundation model trained with >= 1e26 FLOPs must be reported to the government (revoked in 2025)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "US executive order: any foundation model trained with >= 1e26 FLOPs must be reported to the government (revoked in 2025)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 444,
          "function_name": "tensor_operations_flops",
          "code": "text(\"A100 has a peak performance of 312 teraFLOP/s (3.12e14)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A100 has a peak performance of 312 teraFLOP/s (3.12e14)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 445,
          "function_name": "tensor_operations_flops",
          "code": "assert a100_flop_per_sec == 312e12"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 446,
          "function_name": "tensor_operations_flops",
          "code": "text(\"8 A100s for 2 weeks: 1.5e21 FLOPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "8 A100s for 2 weeks: 1.5e21 FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 447,
          "function_name": "tensor_operations_flops",
          "code": "total_flops = 8 * (60 * 60 * 24 * 7) * a100_flop_per_sec"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 449,
          "function_name": "tensor_operations_flops",
          "code": "text(\"## Linear model\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Linear model",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 450,
          "function_name": "tensor_operations_flops",
          "code": "text(\"As motivation, suppose you have a linear model.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As motivation, suppose you have a linear model.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 451,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- We have n points\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We have n points",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 452,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- Each point is d-dimsional\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Each point is d-dimsional",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 453,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- The linear model maps each d-dimensional vector to a k outputs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The linear model maps each d-dimensional vector to a k outputs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 454,
          "function_name": "tensor_operations_flops",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 455,
          "function_name": "tensor_operations_flops",
          "code": "B = 16384  # Number of points"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 456,
          "function_name": "tensor_operations_flops",
          "code": "D = 32768  # Dimension"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 457,
          "function_name": "tensor_operations_flops",
          "code": "K = 8192   # Number of outputs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 463,
          "function_name": "tensor_operations_flops",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 463,
          "function_name": "tensor_operations_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 463,
          "function_name": "tensor_operations_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 463,
          "function_name": "tensor_operations_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 463,
          "function_name": "tensor_operations_flops",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 464,
          "function_name": "tensor_operations_flops",
          "code": "x = torch.ones(B, D, device=device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 465,
          "function_name": "tensor_operations_flops",
          "code": "w = torch.randn(D, K, device=device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 466,
          "function_name": "tensor_operations_flops",
          "code": "y = x @ w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 467,
          "function_name": "tensor_operations_flops",
          "code": "text(\"We have one multiplication (x[i][j] * w[j][k]) and one addition per (i, j, k) triple.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have one multiplication (x[i][j] * w[j][k]) and one addition per (i, j, k) triple.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 468,
          "function_name": "tensor_operations_flops",
          "code": "actual_num_flops = 2 * B * D * K"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 470,
          "function_name": "tensor_operations_flops",
          "code": "text(\"## FLOPs of other operations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## FLOPs of other operations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 471,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- Elementwise operation on a m x n matrix requires O(m n) FLOPs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Elementwise operation on a m x n matrix requires O(m n) FLOPs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 472,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- Addition of two m x n matrices requires m n FLOPs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Addition of two m x n matrices requires m n FLOPs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 473,
          "function_name": "tensor_operations_flops",
          "code": "text(\"In general, no other operation that you'd encounter in deep learning is as expensive as matrix multiplication for large enough matrices.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, no other operation that you'd encounter in deep learning is as expensive as matrix multiplication for large enough matrices.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 475,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Interpretation:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Interpretation:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 476,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- B is the number of data points\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- B is the number of data points",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 477,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- (D K) is the number of parameters\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- (D K) is the number of parameters",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 478,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- FLOPs for forward pass is 2 (# tokens) (# parameters)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- FLOPs for forward pass is 2 (# tokens) (# parameters)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 479,
          "function_name": "tensor_operations_flops",
          "code": "text(\"It turns out this generalizes to Transformers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "It turns out this generalizes to Transformers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 481,
          "function_name": "tensor_operations_flops",
          "code": "text(\"How do our FLOPs calculations translate to wall-clock time (seconds)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do our FLOPs calculations translate to wall-clock time (seconds)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 482,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Let us time it!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let us time it!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1003,
          "function_name": "time_matmul",
          "code": "def time_matmul(a: torch.Tensor, b: torch.Tensor) -> float:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1007,
          "function_name": "time_matmul",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1008,
          "function_name": "time_matmul",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "time_matmul",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1019,
          "function_name": "time_matmul",
          "code": "num_trials = 5"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1022,
          "function_name": "time_matmul",
          "code": "return total_time / num_trials"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 483,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 484,
          "function_name": "tensor_operations_flops",
          "code": "actual_flop_per_sec = actual_num_flops / actual_time"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 485,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"Actual FLOPs/sec (float32): {actual_flop_per_sec}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Actual FLOPs/sec (float32): 54076031276080.66",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 487,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Each GPU has a specification sheet that reports the peak performance.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each GPU has a specification sheet that reports the peak performance.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 488,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- A100 \"), link(title=\"[spec]\", url=\"https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-us-nvidia-1758950-r4-web.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- A100 ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[spec]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/a100/pdf/nvidia-a100-datasheet-us-nvidia-1758950-r4-web.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 489,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- H100 \"), link(title=\"[spec]\", url=\"https://resources.nvidia.com/en-us-tensor-core/nvidia-tensor-core-gpu-datasheet\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- H100 ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[spec]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://resources.nvidia.com/en-us-tensor-core/nvidia-tensor-core-gpu-datasheet",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 490,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Note that the FLOP/s depends heavily on the data type!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that the FLOP/s depends heavily on the data type!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 973,
          "function_name": "get_promised_flop_per_sec",
          "code": "def get_promised_flop_per_sec(device: str, dtype: torch.dtype) -> float:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 975,
          "function_name": "get_promised_flop_per_sec",
          "code": "if not torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 978,
          "function_name": "get_promised_flop_per_sec",
          "code": "properties = torch.cuda.get_device_properties(device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 980,
          "function_name": "get_promised_flop_per_sec",
          "code": "if \"A100\" in properties.name:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 988,
          "function_name": "get_promised_flop_per_sec",
          "code": "if \"H100\" in properties.name:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 990,
          "function_name": "get_promised_flop_per_sec",
          "code": "if dtype == torch.float32:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 991,
          "function_name": "get_promised_flop_per_sec",
          "code": "return 67.5e12"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 491,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 492,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"Promised FLOPs/sec (float32): {promised_flop_per_sec}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Promised FLOPs/sec (float32): 67500000000000.0",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 494,
          "function_name": "tensor_operations_flops",
          "code": "text(\"## Model FLOPs utilization (MFU)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Model FLOPs utilization (MFU)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 496,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Definition: (actual FLOP/s) / (promised FLOP/s) [ignore communication/overhead]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Definition: (actual FLOP/s) / (promised FLOP/s) [ignore communication/overhead]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 497,
          "function_name": "tensor_operations_flops",
          "code": "mfu = actual_flop_per_sec / promised_flop_per_sec"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 498,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"MFU (float32): {mfu}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "MFU (float32): 0.801126389275269",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 499,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Usually, MFU of >= 0.5 is quite good (and will be higher if matmuls dominate)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Usually, MFU of >= 0.5 is quite good (and will be higher if matmuls dominate)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 501,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Let's do it with bfloat16:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's do it with bfloat16:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 502,
          "function_name": "tensor_operations_flops",
          "code": "x = x.to(torch.bfloat16)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 503,
          "function_name": "tensor_operations_flops",
          "code": "w = w.to(torch.bfloat16)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1003,
          "function_name": "time_matmul",
          "code": "def time_matmul(a: torch.Tensor, b: torch.Tensor) -> float:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1007,
          "function_name": "time_matmul",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1008,
          "function_name": "time_matmul",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "time_matmul",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1019,
          "function_name": "time_matmul",
          "code": "num_trials = 5"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1010,
          "function_name": "run",
          "code": "def run():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1012,
          "function_name": "run",
          "code": "a @ b"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1015,
          "function_name": "run",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 234,
          "function_name": "timeit",
          "code": "return Timer(stmt, setup, timer, globals).timeit(number)"
        },
        {
          "path": "../../../usr/lib/python3.10/timeit.py",
          "line_number": 178,
          "function_name": "timeit",
          "code": "timing = self.inner(it, self.timer)"
        },
        {
          "path": "<timeit-src>",
          "line_number": 6,
          "function_name": "inner",
          "code": ""
        },
        {
          "path": "lecture_02.py",
          "line_number": 1016,
          "function_name": "run",
          "code": "torch.cuda.synchronize()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1020,
          "function_name": "time_matmul",
          "code": "total_time = timeit.timeit(run, number=num_trials)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1022,
          "function_name": "time_matmul",
          "code": "return total_time / num_trials"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 504,
          "function_name": "tensor_operations_flops",
          "code": "actual_time = time_matmul(x, w)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 506,
          "function_name": "tensor_operations_flops",
          "code": "actual_flop_per_sec = actual_num_flops / actual_time"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 507,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"Actual FLOPs/sec (bfloat16): {actual_flop_per_sec}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Actual FLOPs/sec (bfloat16): 276150761624700.28",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 973,
          "function_name": "get_promised_flop_per_sec",
          "code": "def get_promised_flop_per_sec(device: str, dtype: torch.dtype) -> float:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 975,
          "function_name": "get_promised_flop_per_sec",
          "code": "if not torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 978,
          "function_name": "get_promised_flop_per_sec",
          "code": "properties = torch.cuda.get_device_properties(device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 980,
          "function_name": "get_promised_flop_per_sec",
          "code": "if \"A100\" in properties.name:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 988,
          "function_name": "get_promised_flop_per_sec",
          "code": "if \"H100\" in properties.name:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 990,
          "function_name": "get_promised_flop_per_sec",
          "code": "if dtype == torch.float32:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 992,
          "function_name": "get_promised_flop_per_sec",
          "code": "if dtype in (torch.bfloat16, torch.float16):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 993,
          "function_name": "get_promised_flop_per_sec",
          "code": "return 1979e12 / 2  # 1979 is for sparse, dense is half of that"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 509,
          "function_name": "tensor_operations_flops",
          "code": "promised_flop_per_sec = get_promised_flop_per_sec(device, x.dtype)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 510,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"Promised FLOPs/sec (bfloat16): {promised_flop_per_sec}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Promised FLOPs/sec (bfloat16): 989500000000000.0",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 512,
          "function_name": "tensor_operations_flops",
          "code": "mfu = actual_flop_per_sec / promised_flop_per_sec"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 513,
          "function_name": "tensor_operations_flops",
          "code": "text(f\"MFU (bfloat16): {mfu}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "MFU (bfloat16): 0.2790811133145026",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 514,
          "function_name": "tensor_operations_flops",
          "code": "text(\"Note: comparing bfloat16 to float32, the actual FLOP/s is higher.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: comparing bfloat16 to float32, the actual FLOP/s is higher.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 515,
          "function_name": "tensor_operations_flops",
          "code": "text(\"The MFU here is rather low, probably because the promised FLOPs is optimistic (and seems to rely on sparsity, which we don't have).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The MFU here is rather low, probably because the promised FLOPs is optimistic (and seems to rely on sparsity, which we don't have).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 517,
          "function_name": "tensor_operations_flops",
          "code": "text(\"## Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 518,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- Matrix multiplications dominate: (2 m n p) FLOPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Matrix multiplications dominate: (2 m n p) FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 519,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- FLOP/s depends on hardware (H100 >> A100) and data type (bfloat16 >> float32)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- FLOP/s depends on hardware (H100 >> A100) and data type (bfloat16 >> float32)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 520,
          "function_name": "tensor_operations_flops",
          "code": "text(\"- Model FLOPs utilization (MFU): (actual FLOP/s) / (promised FLOP/s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Model FLOPs utilization (MFU): (actual FLOP/s) / (promised FLOP/s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 49,
          "function_name": "main",
          "code": "tensor_operations_flops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 523,
          "function_name": "gradients_basics",
          "code": "def gradients_basics():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 524,
          "function_name": "gradients_basics",
          "code": "text(\"So far, we've constructed tensors (which correspond to either parameters or data) and passed them through operations (forward).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far, we've constructed tensors (which correspond to either parameters or data) and passed them through operations (forward).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 525,
          "function_name": "gradients_basics",
          "code": "text(\"Now, we're going to compute the gradient (backward).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now, we're going to compute the gradient (backward).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 527,
          "function_name": "gradients_basics",
          "code": "text(\"As a simple example, let's consider the simple linear model: \""
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As a simple example, let's consider the simple linear model: y = 0.5 (x * w - 5)^2",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 530,
          "function_name": "gradients_basics",
          "code": "text(\"Forward pass: compute loss\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Forward pass: compute loss",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 531,
          "function_name": "gradients_basics",
          "code": "x = torch.tensor([1., 2, 3])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 532,
          "function_name": "gradients_basics",
          "code": "assert x.requires_grad == False  # By default, no gradient"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 533,
          "function_name": "gradients_basics",
          "code": "w = torch.tensor([1., 1, 1], requires_grad=True)  # Want gradient"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 534,
          "function_name": "gradients_basics",
          "code": "pred_y = x @ w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 535,
          "function_name": "gradients_basics",
          "code": "loss = 0.5 * (pred_y - 5).pow(2)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 536,
          "function_name": "gradients_basics",
          "code": "assert w.grad is None"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 538,
          "function_name": "gradients_basics",
          "code": "text(\"Backward pass: compute gradients\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Backward pass: compute gradients",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 539,
          "function_name": "gradients_basics",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 540,
          "function_name": "gradients_basics",
          "code": "assert loss.grad is None"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 541,
          "function_name": "gradients_basics",
          "code": "assert pred_y.grad is None"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 542,
          "function_name": "gradients_basics",
          "code": "assert x.grad is None"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 543,
          "function_name": "gradients_basics",
          "code": "assert torch.equal(w.grad, torch.tensor([1, 2, 3]))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 50,
          "function_name": "main",
          "code": "gradients_basics()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 546,
          "function_name": "gradients_flops",
          "code": "def gradients_flops():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 547,
          "function_name": "gradients_flops",
          "code": "text(\"Let us do count the FLOPs for computing gradients.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let us do count the FLOPs for computing gradients.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 549,
          "function_name": "gradients_flops",
          "code": "text(\"Revisit our linear model\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Revisit our linear model",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 550,
          "function_name": "gradients_flops",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 551,
          "function_name": "gradients_flops",
          "code": "B = 16384  # Number of points"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 552,
          "function_name": "gradients_flops",
          "code": "D = 32768  # Dimension"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 553,
          "function_name": "gradients_flops",
          "code": "K = 8192   # Number of outputs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 559,
          "function_name": "gradients_flops",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 559,
          "function_name": "gradients_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 559,
          "function_name": "gradients_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 559,
          "function_name": "gradients_flops",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 559,
          "function_name": "gradients_flops",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 560,
          "function_name": "gradients_flops",
          "code": "x = torch.ones(B, D, device=device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 561,
          "function_name": "gradients_flops",
          "code": "w1 = torch.randn(D, D, device=device, requires_grad=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 562,
          "function_name": "gradients_flops",
          "code": "w2 = torch.randn(D, K, device=device, requires_grad=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 564,
          "function_name": "gradients_flops",
          "code": "text(\"Model: x --w1--> h1 --w2--> h2 -> loss\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Model: x --w1--> h1 --w2--> h2 -> loss",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 565,
          "function_name": "gradients_flops",
          "code": "h1 = x @ w1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 566,
          "function_name": "gradients_flops",
          "code": "h2 = h1 @ w2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 567,
          "function_name": "gradients_flops",
          "code": "loss = h2.pow(2).mean()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 569,
          "function_name": "gradients_flops",
          "code": "text(\"Recall the number of forward FLOPs: \"), link(tensor_operations_flops)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the number of forward FLOPs: ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": "tensor_operations_flops",
          "style": {},
          "external_link": null,
          "internal_link": {
            "path": "lecture_02.py",
            "line_number": 428
          }
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 570,
          "function_name": "gradients_flops",
          "code": "text(\"- Multiply x[i][j] * w1[j][k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Multiply x[i][j] * w1[j][k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 571,
          "function_name": "gradients_flops",
          "code": "text(\"- Add to h1[i][k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Add to h1[i][k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 572,
          "function_name": "gradients_flops",
          "code": "text(\"- Multiply h1[i][j] * w2[j][k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Multiply h1[i][j] * w2[j][k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 573,
          "function_name": "gradients_flops",
          "code": "text(\"- Add to h2[i][k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Add to h2[i][k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 574,
          "function_name": "gradients_flops",
          "code": "num_forward_flops = (2 * B * D * D) + (2 * B * D * K)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 576,
          "function_name": "gradients_flops",
          "code": "text(\"How many FLOPs is running the backward pass?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How many FLOPs is running the backward pass?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 577,
          "function_name": "gradients_flops",
          "code": "h1.retain_grad()  # For debugging"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 578,
          "function_name": "gradients_flops",
          "code": "h2.retain_grad()  # For debugging"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 579,
          "function_name": "gradients_flops",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 581,
          "function_name": "gradients_flops",
          "code": "text(\"Recall model: x --w1--> h1 --w2--> h2 -> loss\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall model: x --w1--> h1 --w2--> h2 -> loss",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 583,
          "function_name": "gradients_flops",
          "code": "text(\"- h1.grad = d loss / d h1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- h1.grad = d loss / d h1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 584,
          "function_name": "gradients_flops",
          "code": "text(\"- h2.grad = d loss / d h2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- h2.grad = d loss / d h2",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 585,
          "function_name": "gradients_flops",
          "code": "text(\"- w1.grad = d loss / d w1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- w1.grad = d loss / d w1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 586,
          "function_name": "gradients_flops",
          "code": "text(\"- w2.grad = d loss / d w2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- w2.grad = d loss / d w2",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 588,
          "function_name": "gradients_flops",
          "code": "text(\"Focus on the parameter w2.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Focus on the parameter w2.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 589,
          "function_name": "gradients_flops",
          "code": "text(\"Invoke the chain rule.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Invoke the chain rule.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 591,
          "function_name": "gradients_flops",
          "code": "num_backward_flops = 0  # @inspect num_backward_flops"
        }
      ],
      "env": {
        "num_backward_flops": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 593,
          "function_name": "gradients_flops",
          "code": "text(\"w2.grad[j,k] = sum_i h1[i,j] * h2.grad[i,k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "w2.grad[j,k] = sum_i h1[i,j] * h2.grad[i,k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 594,
          "function_name": "gradients_flops",
          "code": "assert w2.grad.size() == torch.Size([D, K])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 595,
          "function_name": "gradients_flops",
          "code": "assert h1.size() == torch.Size([B, D])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 596,
          "function_name": "gradients_flops",
          "code": "assert h2.grad.size() == torch.Size([B, K])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 597,
          "function_name": "gradients_flops",
          "code": "text(\"For each (i, j, k), multiply and add.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For each (i, j, k), multiply and add.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 598,
          "function_name": "gradients_flops",
          "code": "num_backward_flops += 2 * B * D * K  # @inspect num_backward_flops"
        }
      ],
      "env": {
        "num_backward_flops": 8796093022208
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 600,
          "function_name": "gradients_flops",
          "code": "text(\"h1.grad[i,j] = sum_k w2[i,j] * h2[i,k]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h1.grad[i,j] = sum_k w2[i,j] * h2[i,k]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 601,
          "function_name": "gradients_flops",
          "code": "assert h1.grad.size() == torch.Size([B, D])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 602,
          "function_name": "gradients_flops",
          "code": "assert w2.size() == torch.Size([D, K])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 603,
          "function_name": "gradients_flops",
          "code": "assert h2.grad.size() == torch.Size([B, K])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 604,
          "function_name": "gradients_flops",
          "code": "text(\"For each (i, j, k), multiply and add.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For each (i, j, k), multiply and add.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 605,
          "function_name": "gradients_flops",
          "code": "num_backward_flops += 2 * B * D * K  # @inspect num_backward_flops"
        }
      ],
      "env": {
        "num_backward_flops": 17592186044416
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 607,
          "function_name": "gradients_flops",
          "code": "text(\"This was for just w2 (D*K parameters).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This was for just w2 (D*K parameters).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 608,
          "function_name": "gradients_flops",
          "code": "text(\"Can do it for w1 (D*D parameters) as well (though don't need x.grad).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Can do it for w1 (D*D parameters) as well (though don't need x.grad).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 609,
          "function_name": "gradients_flops",
          "code": "num_backward_flops += 4 * B * D * D  # @inspect num_backward_flops"
        }
      ],
      "env": {
        "num_backward_flops": 87960930222080
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 611,
          "function_name": "gradients_flops",
          "code": "text(\"A nice graphical visualization: \"), article_link(\"https://medium.com/@dzmitrybahdanau/the-flops-calculus-of-language-model-training-3b19c1f025e4\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A nice graphical visualization: ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://medium.com/@dzmitrybahdanau/the-flops-calculus-of-language-model-training-3b19c1f025e4",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 612,
          "function_name": "gradients_flops",
          "code": "image(\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*VC9y_dHhCKFPXj90Qshj3w.gif\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-c4037e492b7a4aa56d859f75b243c830-https_miro_medium_com_v2_resize_fit_1400_format_webp_1_VC9y_dHhCKFPXj90Qshj3w_gif",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 614,
          "function_name": "gradients_flops",
          "code": "text(\"Putting it togther:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Putting it togther:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 615,
          "function_name": "gradients_flops",
          "code": "text(\"- Forward pass: 2 (# data points) (# parameters) FLOPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Forward pass: 2 (# data points) (# parameters) FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 616,
          "function_name": "gradients_flops",
          "code": "text(\"- Backward pass: 4 (# data points) (# parameters) FLOPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Backward pass: 4 (# data points) (# parameters) FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 617,
          "function_name": "gradients_flops",
          "code": "text(\"- Total: 6 (# data points) (# parameters) FLOPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Total: 6 (# data points) (# parameters) FLOPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 51,
          "function_name": "main",
          "code": "gradients_flops()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 53,
          "function_name": "main",
          "code": "text(\"## Models\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Models",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 620,
          "function_name": "module_parameters",
          "code": "def module_parameters():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 621,
          "function_name": "module_parameters",
          "code": "input_dim = 16384"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 622,
          "function_name": "module_parameters",
          "code": "hidden_dim = 32"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 624,
          "function_name": "module_parameters",
          "code": "text(\"Model parameters are stored in PyTorch as `nn.Parameter` objects.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Model parameters are stored in PyTorch as `nn.Parameter` objects.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 625,
          "function_name": "module_parameters",
          "code": "w = nn.Parameter(torch.randn(input_dim, hidden_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 626,
          "function_name": "module_parameters",
          "code": "assert isinstance(w, torch.Tensor)  # Behaves like a tensor"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 627,
          "function_name": "module_parameters",
          "code": "assert type(w.data) == torch.Tensor  # Access the underlying tensor"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 629,
          "function_name": "module_parameters",
          "code": "text(\"## Parameter initialization\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Parameter initialization",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 631,
          "function_name": "module_parameters",
          "code": "text(\"Let's see what happens.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's see what happens.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 632,
          "function_name": "module_parameters",
          "code": "x = nn.Parameter(torch.randn(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 633,
          "function_name": "module_parameters",
          "code": "output = x @ w  # @ inspect output"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 634,
          "function_name": "module_parameters",
          "code": "assert output.size() == torch.Size([hidden_dim])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 635,
          "function_name": "module_parameters",
          "code": "text(f\"Note that each element of `output` scales as sqrt(num_inputs): {output[0]}.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that each element of `output` scales as sqrt(num_inputs): 89.14461517333984.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 636,
          "function_name": "module_parameters",
          "code": "text(\"Large values can cause gradients to blow up and cause training to be unstable.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Large values can cause gradients to blow up and cause training to be unstable.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 638,
          "function_name": "module_parameters",
          "code": "text(\"We want an initialization that is invariant to `hidden_dim`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want an initialization that is invariant to `hidden_dim`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 639,
          "function_name": "module_parameters",
          "code": "text(\"To do that, we simply rescale by 1/sqrt(num_inputs)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To do that, we simply rescale by 1/sqrt(num_inputs)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 640,
          "function_name": "module_parameters",
          "code": "w = nn.Parameter(torch.randn(input_dim, hidden_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 641,
          "function_name": "module_parameters",
          "code": "output = x @ w  # @ inspect output"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 642,
          "function_name": "module_parameters",
          "code": "text(f\"Now each element of `output` is constant: {output[0]}.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now each element of `output` is constant: -1.2443902492523193.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 644,
          "function_name": "module_parameters",
          "code": "text(\"Up to a constant, this is Xavier initialization.\"), link(title=\"[paper]\", url=\"https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\"), link(title=\"[stackexchange]\", url=\"https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Up to a constant, this is Xavier initialization.",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[paper]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[stackexchange]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 646,
          "function_name": "module_parameters",
          "code": "text(\"To be extra safe, we truncate the normal distribution to [-3, 3].\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To be extra safe, we truncate the normal distribution to [-3, 3].",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 647,
          "function_name": "module_parameters",
          "code": "w = nn.Parameter(nn.init.trunc_normal_(torch.empty(input_dim, hidden_dim), std=1, a=-3, b=3))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 54,
          "function_name": "main",
          "code": "module_parameters()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 650,
          "function_name": "custom_model",
          "code": "def custom_model():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 651,
          "function_name": "custom_model",
          "code": "text(\"Let's build up a simple deep linear model using `nn.Parameter`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's build up a simple deep linear model using `nn.Parameter`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 653,
          "function_name": "custom_model",
          "code": "D = 64  # Dimension"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 654,
          "function_name": "custom_model",
          "code": "num_layers = 2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 691,
          "function_name": "__init__",
          "code": "def __init__(self, dim: int, num_layers: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 692,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "__init__",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 655,
          "function_name": "custom_model",
          "code": "model = Cruncher(dim=D, num_layers=num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 659,
          "function_name": "custom_model",
          "code": "for name, param in model.state_dict().items()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "<listcomp>",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 659,
          "function_name": "<listcomp>",
          "code": "for name, param in model.state_dict().items()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 658,
          "function_name": "<listcomp>",
          "code": "(name, param.numel())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "<listcomp>",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 659,
          "function_name": "<listcomp>",
          "code": "for name, param in model.state_dict().items()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 658,
          "function_name": "<listcomp>",
          "code": "(name, param.numel())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "<listcomp>",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 659,
          "function_name": "<listcomp>",
          "code": "for name, param in model.state_dict().items()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 658,
          "function_name": "<listcomp>",
          "code": "(name, param.numel())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "<listcomp>",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 657,
          "function_name": "custom_model",
          "code": "param_sizes = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 661,
          "function_name": "custom_model",
          "code": "assert param_sizes == ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 662,
          "function_name": "custom_model",
          "code": "(\"layers.0.weight\", D * D),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 663,
          "function_name": "custom_model",
          "code": "(\"layers.1.weight\", D * D),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 664,
          "function_name": "custom_model",
          "code": "(\"final.weight\", D),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 661,
          "function_name": "custom_model",
          "code": "assert param_sizes == ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1025,
          "function_name": "get_num_parameters",
          "code": "def get_num_parameters(model: nn.Module) -> int:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "<genexpr>",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 666,
          "function_name": "custom_model",
          "code": "num_parameters = get_num_parameters(model)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 667,
          "function_name": "custom_model",
          "code": "assert num_parameters == (D * D) + (D * D) + D"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 669,
          "function_name": "custom_model",
          "code": "text(\"Remember to move the model to the GPU.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Remember to move the model to the GPU.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 670,
          "function_name": "custom_model",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 670,
          "function_name": "custom_model",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 670,
          "function_name": "custom_model",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 670,
          "function_name": "custom_model",
          "code": "device = get_device()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 670,
          "function_name": "custom_model",
          "code": "device = get_device()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 671,
          "function_name": "custom_model",
          "code": "model = model.to(device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 673,
          "function_name": "custom_model",
          "code": "text(\"Run the model on some data.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Run the model on some data.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 674,
          "function_name": "custom_model",
          "code": "B = 8  # Batch size"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 675,
          "function_name": "custom_model",
          "code": "x = torch.randn(B, D, device=device)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 676,
          "function_name": "custom_model",
          "code": "y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 677,
          "function_name": "custom_model",
          "code": "assert y.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 55,
          "function_name": "main",
          "code": "custom_model()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 57,
          "function_name": "main",
          "code": "text(\"Training loop and best practices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training loop and best practices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 744,
          "function_name": "note_about_randomness",
          "code": "def note_about_randomness():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 745,
          "function_name": "note_about_randomness",
          "code": "text(\"Randomness shows up in many places: \""
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Randomness shows up in many places: parameter initialization, dropout, data ordering, etc.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 747,
          "function_name": "note_about_randomness",
          "code": "text(\"For reproducibility, \""
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For reproducibility, we recommend you always pass in a different random seed for each use of randomness.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 749,
          "function_name": "note_about_randomness",
          "code": "text(\"Determinism is particularly useful when debugging, so you can hunt down the bug.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Determinism is particularly useful when debugging, so you can hunt down the bug.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 751,
          "function_name": "note_about_randomness",
          "code": "text(\"There are three places to set the random seed, \""
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are three places to set the random seed, which you should do all at once just to be safe.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 754,
          "function_name": "note_about_randomness",
          "code": "seed = 0"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 755,
          "function_name": "note_about_randomness",
          "code": "torch.manual_seed(seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 758,
          "function_name": "note_about_randomness",
          "code": "import numpy as np"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 759,
          "function_name": "note_about_randomness",
          "code": "np.random.seed(seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 762,
          "function_name": "note_about_randomness",
          "code": "import random"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 763,
          "function_name": "note_about_randomness",
          "code": "random.seed(seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 58,
          "function_name": "main",
          "code": "note_about_randomness()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 766,
          "function_name": "data_loading",
          "code": "def data_loading():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 767,
          "function_name": "data_loading",
          "code": "text(\"In language modeling, data is a sequence of integers (output by the tokenizer).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In language modeling, data is a sequence of integers (output by the tokenizer).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 769,
          "function_name": "data_loading",
          "code": "text(\"It is convenient to serialize them as numpy arrays (done by the tokenizer).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "It is convenient to serialize them as numpy arrays (done by the tokenizer).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 770,
          "function_name": "data_loading",
          "code": "orig_data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int32)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 771,
          "function_name": "data_loading",
          "code": "orig_data.tofile(\"data.npy\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 773,
          "function_name": "data_loading",
          "code": "text(\"You can load them back as numpy arrays.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can load them back as numpy arrays.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 774,
          "function_name": "data_loading",
          "code": "text(\"Don't want to load the entire data into memory at once (LLaMA data is 2.8TB).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Don't want to load the entire data into memory at once (LLaMA data is 2.8TB).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 775,
          "function_name": "data_loading",
          "code": "text(\"Use memmap to lazily load only the accessed parts into memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Use memmap to lazily load only the accessed parts into memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 776,
          "function_name": "data_loading",
          "code": "data = np.memmap(\"data.npy\", dtype=np.int32)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 777,
          "function_name": "data_loading",
          "code": "assert np.array_equal(data, orig_data)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 779,
          "function_name": "data_loading",
          "code": "text(\"A *data loader* generates a batch of sequences for training.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A *data loader* generates a batch of sequences for training.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 780,
          "function_name": "data_loading",
          "code": "B = 2  # Batch size"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 781,
          "function_name": "data_loading",
          "code": "L = 4  # Length of sequence"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 716,
          "function_name": "get_batch",
          "code": "def get_batch(data: np.array, batch_size: int, sequence_length: int, device: str) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 717,
          "function_name": "get_batch",
          "code": "text(\"Sample `batch_size` random positions into `data`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Sample `batch_size` random positions into `data`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 718,
          "function_name": "get_batch",
          "code": "start_indices = torch.randint(len(data) - sequence_length, (batch_size,))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 719,
          "function_name": "get_batch",
          "code": "assert start_indices.size() == torch.Size([batch_size])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 721,
          "function_name": "get_batch",
          "code": "text(\"Index into the data.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Index into the data.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 722,
          "function_name": "get_batch",
          "code": "x = torch.tensor([data[start:start + sequence_length] for start in start_indices])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 722,
          "function_name": "get_batch",
          "code": "x = torch.tensor([data[start:start + sequence_length] for start in start_indices])"
        },
        {
          "path": "lecture_02.py",
          "line_number": 722,
          "function_name": "<listcomp>",
          "code": "x = torch.tensor([data[start:start + sequence_length] for start in start_indices])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 722,
          "function_name": "get_batch",
          "code": "x = torch.tensor([data[start:start + sequence_length] for start in start_indices])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 723,
          "function_name": "get_batch",
          "code": "assert x.size() == torch.Size([batch_size, sequence_length])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 725,
          "function_name": "get_batch",
          "code": "text(\"## Pinned memory\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Pinned memory",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 727,
          "function_name": "get_batch",
          "code": "text(\"By default, CPU tensors are in paged memory. We can explicitly pin.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "By default, CPU tensors are in paged memory. We can explicitly pin.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 728,
          "function_name": "get_batch",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 729,
          "function_name": "get_batch",
          "code": "x = x.pin_memory()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 731,
          "function_name": "get_batch",
          "code": "text(\"This allows us to copy `x` from CPU into GPU asynchronously.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This allows us to copy `x` from CPU into GPU asynchronously.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 732,
          "function_name": "get_batch",
          "code": "x = x.to(device, non_blocking=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 734,
          "function_name": "get_batch",
          "code": "text(\"This allows us to do two things in parallel (not done here):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This allows us to do two things in parallel (not done here):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 735,
          "function_name": "get_batch",
          "code": "text(\"- Fetch the next batch of data into CPU\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Fetch the next batch of data into CPU",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 736,
          "function_name": "get_batch",
          "code": "text(\"- Process `x` on the GPU.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Process `x` on the GPU.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 738,
          "function_name": "get_batch",
          "code": "link(\"https://developer.nvidia.com/blog/how-optimize-data-transfers-cuda-cc/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://developer.nvidia.com/blog/how-optimize-data-transfers-cuda-cc/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 739,
          "function_name": "get_batch",
          "code": "link(\"https://gist.github.com/ZijiaLewisLu/eabdca955110833c0ce984d34eb7ff39?permalink_comment_id=3417135\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://gist.github.com/ZijiaLewisLu/eabdca955110833c0ce984d34eb7ff39?permalink_comment_id=3417135",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 741,
          "function_name": "get_batch",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 782,
          "function_name": "data_loading",
          "code": "x = get_batch(data, batch_size=B, sequence_length=L, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 783,
          "function_name": "data_loading",
          "code": "assert x.size() == torch.Size([B, L])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 59,
          "function_name": "main",
          "code": "data_loading()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 821,
          "function_name": "optimizer",
          "code": "def optimizer():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 822,
          "function_name": "optimizer",
          "code": "text(\"Recall our deep linear model.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall our deep linear model.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 823,
          "function_name": "optimizer",
          "code": "B = 2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 824,
          "function_name": "optimizer",
          "code": "D = 4"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 825,
          "function_name": "optimizer",
          "code": "num_layers = 2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 691,
          "function_name": "__init__",
          "code": "def __init__(self, dim: int, num_layers: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 692,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "__init__",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 826,
          "function_name": "optimizer",
          "code": "model = Cruncher(dim=D, num_layers=num_layers).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 828,
          "function_name": "optimizer",
          "code": "text(\"Let's define the AdaGrad optimizer\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's define the AdaGrad optimizer",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 829,
          "function_name": "optimizer",
          "code": "text(\"- AdaGrad = SGD + scale by grad^2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- AdaGrad = SGD + scale by grad^2",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 830,
          "function_name": "optimizer",
          "code": "text(\"- RMSProp = AdaGrad + exponentially decaying weighting\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- RMSProp = AdaGrad + exponentially decaying weighting",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 831,
          "function_name": "optimizer",
          "code": "text(\"- Adam = RMSProp + momentum\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Adam = RMSProp + momentum",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 832,
          "function_name": "optimizer",
          "code": "link(\"https://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 833,
          "function_name": "optimizer",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 833,
          "function_name": "optimizer",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 799,
          "function_name": "__init__",
          "code": "def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 833,
          "function_name": "optimizer",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 800,
          "function_name": "__init__",
          "code": "super(AdaGrad, self).__init__(params, dict(lr=lr))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 833,
          "function_name": "optimizer",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 834,
          "function_name": "optimizer",
          "code": "state = model.state_dict()  # @inspect state"
        }
      ],
      "env": {
        "state": {
          "layers.0.weight": [
            [
              -0.12528929114341736,
              -0.21693940460681915,
              0.4243551790714264,
              0.34600457549095154
            ],
            [
              -0.15800638496875763,
              -1.0576096773147583,
              -0.17806418240070343,
              0.21861135959625244
            ],
            [
              0.17499159276485443,
              0.15406696498394012,
              0.05992075428366661,
              0.6188289523124695
            ],
            [
              0.5583885908126831,
              -0.1236390769481659,
              -0.52187579870224,
              -0.6726526021957397
            ]
          ],
          "layers.1.weight": [
            [
              0.28332531452178955,
              0.3967541754245758,
              0.29941973090171814,
              -0.7775475382804871
            ],
            [
              -0.1706801950931549,
              0.92650306224823,
              0.23404820263385773,
              -0.0788562223315239
            ],
            [
              -0.08669837564229965,
              0.09173896908760071,
              0.6946830749511719,
              0.7931671142578125
            ],
            [
              0.4731491804122925,
              -0.4218383729457855,
              0.4659132957458496,
              0.6295046210289001
            ]
          ],
          "final.weight": [
            [
              0.20435787737369537
            ],
            [
              0.7107089757919312
            ],
            [
              0.07469850033521652
            ],
            [
              -0.3354300260543823
            ]
          ]
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 836,
          "function_name": "optimizer",
          "code": "text(\"Compute gradients\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Compute gradients",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 837,
          "function_name": "optimizer",
          "code": "x = torch.randn(B, D, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 837,
          "function_name": "optimizer",
          "code": "x = torch.randn(B, D, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 837,
          "function_name": "optimizer",
          "code": "x = torch.randn(B, D, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 837,
          "function_name": "optimizer",
          "code": "x = torch.randn(B, D, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 837,
          "function_name": "optimizer",
          "code": "x = torch.randn(B, D, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 838,
          "function_name": "optimizer",
          "code": "y = torch.tensor([4., 5.], device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 838,
          "function_name": "optimizer",
          "code": "y = torch.tensor([4., 5.], device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 838,
          "function_name": "optimizer",
          "code": "y = torch.tensor([4., 5.], device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 838,
          "function_name": "optimizer",
          "code": "y = torch.tensor([4., 5.], device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 838,
          "function_name": "optimizer",
          "code": "y = torch.tensor([4., 5.], device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 703,
          "function_name": "forward",
          "code": "x = layer(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 839,
          "function_name": "optimizer",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 840,
          "function_name": "optimizer",
          "code": "loss = F.mse_loss(input=pred_y, target=y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 841,
          "function_name": "optimizer",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 843,
          "function_name": "optimizer",
          "code": "text(\"Take a step\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Take a step",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 802,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 803,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 804,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 805,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 807,
          "function_name": "step",
          "code": "state = self.state[p]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 808,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 811,
          "function_name": "step",
          "code": "g2 = state.get(\"g2\", torch.zeros_like(grad))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 814,
          "function_name": "step",
          "code": "g2 += torch.square(grad)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 815,
          "function_name": "step",
          "code": "state[\"g2\"] = g2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 818,
          "function_name": "step",
          "code": "p.data -= lr * grad / torch.sqrt(g2 + 1e-5)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 805,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 807,
          "function_name": "step",
          "code": "state = self.state[p]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 808,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 811,
          "function_name": "step",
          "code": "g2 = state.get(\"g2\", torch.zeros_like(grad))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 814,
          "function_name": "step",
          "code": "g2 += torch.square(grad)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 815,
          "function_name": "step",
          "code": "state[\"g2\"] = g2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 818,
          "function_name": "step",
          "code": "p.data -= lr * grad / torch.sqrt(g2 + 1e-5)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 805,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 807,
          "function_name": "step",
          "code": "state = self.state[p]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 808,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 811,
          "function_name": "step",
          "code": "g2 = state.get(\"g2\", torch.zeros_like(grad))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 814,
          "function_name": "step",
          "code": "g2 += torch.square(grad)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 815,
          "function_name": "step",
          "code": "state[\"g2\"] = g2"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 818,
          "function_name": "step",
          "code": "p.data -= lr * grad / torch.sqrt(g2 + 1e-5)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 805,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 803,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 844,
          "function_name": "optimizer",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 845,
          "function_name": "optimizer",
          "code": "state = model.state_dict()  # @inspect state"
        }
      ],
      "env": {
        "state": {
          "layers.0.weight": [
            [
              -0.1352892816066742,
              -0.226939395070076,
              0.4343550205230713,
              0.356004536151886
            ],
            [
              -0.16800637543201447,
              -1.0676096677780151,
              -0.16806429624557495,
              0.22861133515834808
            ],
            [
              0.1649915874004364,
              0.1440669596195221,
              0.06992074102163315,
              0.6288289427757263
            ],
            [
              0.5483887195587158,
              -0.13363897800445557,
              -0.5118773579597473,
              -0.6626529097557068
            ]
          ],
          "layers.1.weight": [
            [
              0.2733258605003357,
              0.38675421476364136,
              0.2894238829612732,
              -0.7675477266311646
            ],
            [
              -0.16068029403686523,
              0.9365030527114868,
              0.24404743313789368,
              -0.08885618299245834
            ],
            [
              -0.0966966301202774,
              0.08173911273479462,
              0.6846961379051208,
              0.8031664490699768
            ],
            [
              0.46314918994903564,
              -0.43183836340904236,
              0.4559134244918823,
              0.639504611492157
            ]
          ],
          "final.weight": [
            [
              0.19435787200927734
            ],
            [
              0.720708966255188
            ],
            [
              0.06469850242137909
            ],
            [
              -0.34543001651763916
            ]
          ]
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 847,
          "function_name": "optimizer",
          "code": "text(\"Free up the memory (optional)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Free up the memory (optional)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 848,
          "function_name": "optimizer",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 850,
          "function_name": "optimizer",
          "code": "text(\"## Memory\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Memory",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 853,
          "function_name": "optimizer",
          "code": "num_parameters = (D * D * num_layers) + D"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1025,
          "function_name": "get_num_parameters",
          "code": "def get_num_parameters(model: nn.Module) -> int:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "<genexpr>",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1026,
          "function_name": "get_num_parameters",
          "code": "return sum(param.numel() for param in model.parameters())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 854,
          "function_name": "optimizer",
          "code": "assert num_parameters == get_num_parameters(model)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 857,
          "function_name": "optimizer",
          "code": "num_activations = B * D * num_layers"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 860,
          "function_name": "optimizer",
          "code": "num_gradients = num_parameters"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 863,
          "function_name": "optimizer",
          "code": "num_optimizer_states = num_parameters"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 866,
          "function_name": "optimizer",
          "code": "total_memory = 4 * \\"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 867,
          "function_name": "optimizer",
          "code": "(num_parameters + num_activations + num_gradients + num_optimizer_states)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 866,
          "function_name": "optimizer",
          "code": "total_memory = 4 * \\"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 868,
          "function_name": "optimizer",
          "code": "text(total_memory)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": 496,
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 870,
          "function_name": "optimizer",
          "code": "text(\"## Compute (for one step)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Compute (for one step)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 871,
          "function_name": "optimizer",
          "code": "flops = 6 * B * num_parameters"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 872,
          "function_name": "optimizer",
          "code": "text(flops)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": 432,
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 874,
          "function_name": "optimizer",
          "code": "text(\"## Transformers\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Transformers",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 876,
          "function_name": "optimizer",
          "code": "text(\"The accounting for a Transformer is more complicated, but the same idea.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The accounting for a Transformer is more complicated, but the same idea.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 877,
          "function_name": "optimizer",
          "code": "text(\"Assignment 1 will ask you to do that.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Assignment 1 will ask you to do that.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 879,
          "function_name": "optimizer",
          "code": "text(\"Blog post describing memory usage for Transformer training\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Blog post describing memory usage for Transformer training",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 880,
          "function_name": "optimizer",
          "code": "link(\"https://erees.dev/transformer-memory/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://erees.dev/transformer-memory/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 882,
          "function_name": "optimizer",
          "code": "text(\"Blog post descibing FLOPs for a Transformer:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Blog post descibing FLOPs for a Transformer:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 883,
          "function_name": "optimizer",
          "code": "link(\"https://www.adamcasson.com/posts/transformer-flops\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.adamcasson.com/posts/transformer-flops",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 61,
          "function_name": "main",
          "code": "optimizer()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 886,
          "function_name": "train_loop",
          "code": "def train_loop():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 887,
          "function_name": "train_loop",
          "code": "text(\"Generate data from linear function with weights (0, 1, 2, ..., D-1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Generate data from linear function with weights (0, 1, 2, ..., D-1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 888,
          "function_name": "train_loop",
          "code": "D = 16"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 889,
          "function_name": "train_loop",
          "code": "true_w = torch.arange(D, dtype=torch.float32, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 889,
          "function_name": "train_loop",
          "code": "true_w = torch.arange(D, dtype=torch.float32, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 889,
          "function_name": "train_loop",
          "code": "true_w = torch.arange(D, dtype=torch.float32, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 889,
          "function_name": "train_loop",
          "code": "true_w = torch.arange(D, dtype=torch.float32, device=get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 889,
          "function_name": "train_loop",
          "code": "true_w = torch.arange(D, dtype=torch.float32, device=get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "train_loop",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 895,
          "function_name": "train_loop",
          "code": "text(\"Let's do a basic run\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's do a basic run",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 902,
          "function_name": "train",
          "code": "def train(name: str, get_batch,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 691,
          "function_name": "__init__",
          "code": "def __init__(self, dim: int, num_layers: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 692,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "__init__",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 787,
          "function_name": "__init__",
          "code": "def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 788,
          "function_name": "__init__",
          "code": "super(SGD, self).__init__(params, dict(lr=lr))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 896,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 898,
          "function_name": "train_loop",
          "code": "text(\"Do some hyperparameter tuning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Do some hyperparameter tuning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 902,
          "function_name": "train",
          "code": "def train(name: str, get_batch,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 691,
          "function_name": "__init__",
          "code": "def __init__(self, dim: int, num_layers: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 692,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "__init__",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 905,
          "function_name": "train",
          "code": "model = Cruncher(dim=D, num_layers=0).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 787,
          "function_name": "__init__",
          "code": "def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 788,
          "function_name": "__init__",
          "code": "super(SGD, self).__init__(params, dict(lr=lr))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 906,
          "function_name": "train",
          "code": "optimizer = SGD(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 890,
          "function_name": "get_batch",
          "code": "def get_batch(B: int) -> tuple[torch.Tensor, torch.Tensor]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 891,
          "function_name": "get_batch",
          "code": "x = torch.randn(B, D).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 892,
          "function_name": "get_batch",
          "code": "true_y = x @ true_w"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 893,
          "function_name": "get_batch",
          "code": "return (x, true_y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 910,
          "function_name": "train",
          "code": "x, y = get_batch(B=B)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 699,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 701,
          "function_name": "forward",
          "code": "B, D = x.size()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 702,
          "function_name": "forward",
          "code": "for layer in self.layers:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 686,
          "function_name": "forward",
          "code": "def forward(self, x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 687,
          "function_name": "forward",
          "code": "return x @ self.weight"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 706,
          "function_name": "forward",
          "code": "x = self.final(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 707,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B, 1])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 710,
          "function_name": "forward",
          "code": "x = x.squeeze(-1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 711,
          "function_name": "forward",
          "code": "assert x.size() == torch.Size([B])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1739,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/nn/modules/module.py",
          "line_number": 1750,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 713,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 913,
          "function_name": "train",
          "code": "pred_y = model(x)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 914,
          "function_name": "train",
          "code": "loss = F.mse_loss(pred_y, y)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 917,
          "function_name": "train",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 790,
          "function_name": "step",
          "code": "def step(self):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 792,
          "function_name": "step",
          "code": "lr = group[\"lr\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 794,
          "function_name": "step",
          "code": "grad = p.grad.data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 795,
          "function_name": "step",
          "code": "p.data -= lr * grad"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 793,
          "function_name": "step",
          "code": "for p in group[\"params\"]:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        },
        {
          "path": "main/lib/python3.10/site-packages/torch/optim/optimizer.py",
          "line_number": 493,
          "function_name": "wrapper",
          "code": "out = func(*args, **kwargs)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 791,
          "function_name": "step",
          "code": "for group in self.param_groups:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 920,
          "function_name": "train",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 921,
          "function_name": "train",
          "code": "optimizer.zero_grad(set_to_none=True)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 908,
          "function_name": "train",
          "code": "for t in range(num_train_steps):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 899,
          "function_name": "train_loop",
          "code": "train(\"simple\", get_batch, D=D, num_layers=0, B=4, num_train_steps=10, lr=0.1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 62,
          "function_name": "main",
          "code": "train_loop()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 924,
          "function_name": "checkpointing",
          "code": "def checkpointing():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 925,
          "function_name": "checkpointing",
          "code": "text(\"Training language models take a long time and certainly will certainly crash.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training language models take a long time and certainly will certainly crash.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 926,
          "function_name": "checkpointing",
          "code": "text(\"You don't want to lose all your progress.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You don't want to lose all your progress.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 928,
          "function_name": "checkpointing",
          "code": "text(\"During training, it is useful to periodically save your model and optimizer state to disk.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "During training, it is useful to periodically save your model and optimizer state to disk.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 691,
          "function_name": "__init__",
          "code": "def __init__(self, dim: int, num_layers: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 692,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "__init__",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 695,
          "function_name": "<listcomp>",
          "code": "for i in range(num_layers)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 694,
          "function_name": "<listcomp>",
          "code": "Linear(dim, dim)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "<listcomp>",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 693,
          "function_name": "__init__",
          "code": "self.layers = nn.ModuleList(["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 682,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, output_dim: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 683,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 684,
          "function_name": "__init__",
          "code": "self.weight = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 697,
          "function_name": "__init__",
          "code": "self.final = Linear(dim, 1)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1028,
          "function_name": "get_device",
          "code": "def get_device(index: int = 0) -> torch.device:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1030,
          "function_name": "get_device",
          "code": "if torch.cuda.is_available():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        },
        {
          "path": "lecture_02.py",
          "line_number": 1031,
          "function_name": "get_device",
          "code": "return torch.device(f\"cuda:{index}\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 930,
          "function_name": "checkpointing",
          "code": "model = Cruncher(dim=64, num_layers=3).to(get_device())"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 931,
          "function_name": "checkpointing",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 931,
          "function_name": "checkpointing",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 799,
          "function_name": "__init__",
          "code": "def __init__(self, params: Iterable[nn.Parameter], lr: float = 0.01):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 931,
          "function_name": "checkpointing",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        },
        {
          "path": "lecture_02.py",
          "line_number": 800,
          "function_name": "__init__",
          "code": "super(AdaGrad, self).__init__(params, dict(lr=lr))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 931,
          "function_name": "checkpointing",
          "code": "optimizer = AdaGrad(model.parameters(), lr=0.01)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 933,
          "function_name": "checkpointing",
          "code": "text(\"Save the checkpoint:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Save the checkpoint:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 935,
          "function_name": "checkpointing",
          "code": "\"model\": model.state_dict(),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 936,
          "function_name": "checkpointing",
          "code": "\"optimizer\": optimizer.state_dict(),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 934,
          "function_name": "checkpointing",
          "code": "checkpoint = {"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 938,
          "function_name": "checkpointing",
          "code": "torch.save(checkpoint, \"model_checkpoint.pt\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 940,
          "function_name": "checkpointing",
          "code": "text(\"Load the checkpoint:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Load the checkpoint:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 941,
          "function_name": "checkpointing",
          "code": "loaded_checkpoint = torch.load(\"model_checkpoint.pt\")"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 63,
          "function_name": "main",
          "code": "checkpointing()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 944,
          "function_name": "mixed_precision_training",
          "code": "def mixed_precision_training():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 945,
          "function_name": "mixed_precision_training",
          "code": "text(\"Choice of data type (float32, bfloat16, fp8) have tradeoffs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Choice of data type (float32, bfloat16, fp8) have tradeoffs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 946,
          "function_name": "mixed_precision_training",
          "code": "text(\"- Higher precision: more accurate/stable, more memory, more compute\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Higher precision: more accurate/stable, more memory, more compute",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 947,
          "function_name": "mixed_precision_training",
          "code": "text(\"- Lower precision: less accurate/stable, less memory, less compute\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Lower precision: less accurate/stable, less memory, less compute",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 949,
          "function_name": "mixed_precision_training",
          "code": "text(\"How can we get the best of both worlds?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How can we get the best of both worlds?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 951,
          "function_name": "mixed_precision_training",
          "code": "text(\"Solution: use float32 by default, but use {bfloat16, fp8} when possible.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: use float32 by default, but use {bfloat16, fp8} when possible.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 953,
          "function_name": "mixed_precision_training",
          "code": "text(\"A concrete plan:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A concrete plan:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 954,
          "function_name": "mixed_precision_training",
          "code": "text(\"- Use {bfloat16, fp8} for the forward pass (activations).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Use {bfloat16, fp8} for the forward pass (activations).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 955,
          "function_name": "mixed_precision_training",
          "code": "text(\"- Use float32 for the rest (parameters, gradients).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Use float32 for the rest (parameters, gradients).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 957,
          "function_name": "mixed_precision_training",
          "code": "text(\"- Mixed precision training \"), link(\"https://arxiv.org/pdf/1710.03740.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Mixed precision training ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Mixed Precision Training",
            "authors": [
              "Paulius Micikevicius",
              "Sharan Narang",
              "Jonah Alben",
              "Gregory Diamos",
              "Erich Elsen",
              "David Garcia",
              "Boris Ginsburg",
              "Michael Houston",
              "Oleksii Kuchaiev",
              "Ganesh Venkatesh",
              "Hao Wu"
            ],
            "organization": null,
            "date": "2017-10-10T17:42:04Z",
            "url": "https://arxiv.org/pdf/1710.03740.pdf",
            "description": "Deep neural networks have enabled progress in a wide variety of applications. Growing the size of the neural network typically results in improved accuracy. As model sizes grow, the memory and compute requirements for training these models also increases. We introduce a technique to train deep neural networks using half precision floating point numbers. In our technique, weights, activations and gradients are stored in IEEE half-precision format. Half-precision floating numbers have limited numerical range compared to single-precision numbers. We propose two techniques to handle this loss of information. Firstly, we recommend maintaining a single-precision copy of the weights that accumulates the gradients after each optimizer step. This single-precision copy is rounded to half-precision format during training. Secondly, we propose scaling the loss appropriately to handle the loss of information with half-precision gradients. We demonstrate that this approach works for a wide variety of models including convolution neural networks, recurrent neural networks and generative adversarial networks. This technique works for large scale models with more than 100 million parameters trained on large datasets. Using this approach, we can reduce the memory consumption of deep learning models by nearly 2x. In future processors, we can also expect a significant computation speedup using half-precision hardware units.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 959,
          "function_name": "mixed_precision_training",
          "code": "text(\"Pytorch has an automatic mixed precision (AMP) library.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Pytorch has an automatic mixed precision (AMP) library.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 960,
          "function_name": "mixed_precision_training",
          "code": "link(\"https://pytorch.org/docs/stable/amp.html\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://pytorch.org/docs/stable/amp.html",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 961,
          "function_name": "mixed_precision_training",
          "code": "link(\"https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": null,
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 963,
          "function_name": "mixed_precision_training",
          "code": "text(\"NVIDIA's Transformer Engine supports FP8 for linear layers\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "NVIDIA's Transformer Engine supports FP8 for linear layers",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        },
        {
          "path": "lecture_02.py",
          "line_number": 964,
          "function_name": "mixed_precision_training",
          "code": "text(\"Use FP8 pervasively throughout training \"), link(\"https://arxiv.org/pdf/2310.18313.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Use FP8 pervasively throughout training ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "FP8-LM: Training FP8 Large Language Models",
            "authors": [
              "Houwen Peng",
              "Kan Wu",
              "Yixuan Wei",
              "Guoshuai Zhao",
              "Yuxiang Yang",
              "Ze Liu",
              "Yifan Xiong",
              "Ziyue Yang",
              "Bolin Ni",
              "Jingcheng Hu",
              "Ruihang Li",
              "Miaosen Zhang",
              "Chen Li",
              "Jia Ning",
              "Ruizhe Wang",
              "Zheng Zhang",
              "Shuguang Liu",
              "Joe Chau",
              "Han Hu",
              "Peng Cheng"
            ],
            "organization": null,
            "date": "2023-10-27T17:59:51Z",
            "url": "https://arxiv.org/pdf/2310.18313.pdf",
            "description": "In this paper, we explore FP8 low-bit data formats for efficient training of large language models (LLMs). Our key insight is that most variables, such as gradients and optimizer states, in LLM training can employ low-precision data formats without compromising model accuracy and requiring no changes to hyper-parameters. Specifically, we propose a new FP8 automatic mixed-precision framework for training LLMs. This framework offers three levels of FP8 utilization to streamline mixed-precision and distributed parallel training for LLMs. It gradually incorporates 8-bit gradients, optimizer states, and distributed learning in an incremental manner. Experiment results show that, during the training of GPT-175B model on H100 GPU platform, our FP8 mixed-precision training framework not only achieved a remarkable 39% reduction in real memory usage but also ran 75% faster than the widely adopted BF16 framework (i.e., Megatron-LM), surpassing the speed of Nvidia Transformer Engine by 37%. This largely reduces the training costs for large foundation models. Furthermore, our FP8 mixed-precision training methodology is generic. It can be seamlessly applied to other tasks such as LLM instruction tuning and reinforcement learning with human feedback, offering savings in fine-tuning expenses. Our FP8 low-precision training framework is open-sourced at {https://github.com/Azure/MS-AMP}{aka.ms/MS.AMP}.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_02.py",
          "line_number": 64,
          "function_name": "main",
          "code": "mixed_precision_training()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    }
  ]
}